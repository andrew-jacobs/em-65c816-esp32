
Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ;  _____ __  __        __  ____   ____ ___  _  __
                             ; | ____|  \/  |      / /_| ___| / ___( _ )/ |/ /_
                             ; |  _| | |\/| |_____| '_ \___ \| |   / _ \| | '_ \
                             ; | |___| |  | |_____| (_) |__) | |__| (_) | | (_) |
                             ; |_____|_|__|_|___ __\___/____/ \____\___/|_|\___/
                             ; | ____/ ___||  _ \___ /___ \
                             ; |  _| \___ \| |_) ||_ \ __) |
                             ; | |___ ___) |  __/___) / __/
                             ; |_____|____/|_|  |____/_____|
                             ;
                             ; Boot ROM, Monitor & Operating System
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C),2019 Andrew John Jacobs
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; This source file builds both the boot ($00:f000-ffff) and rom0 ($04:0000-ffff)
                             ; images.
                             ;
                             ; The following table describes the memory map of the target system.
                             ;
                             ; +---------+----+-------------------------------
                             ; | 00:0000 | RW | OS Variables & Stack
                             ; +---------+----+-------------------------------
                             ; | 00:1000 | RW | Task Zero Pages & Stack
                             ; |---------+----+-------------------------------
                             ; | 00:2000 | RW | Other tasks areas
                             ; |         |    |
                             ; |         |    |
                             ; +---------+----+-------------------------------
                             ; | 00:ee00 | RW | Monitor Workspace - Can be overwritten
                             ; +---------+----+-------------------------------
                             ; | 00:ef00 | RW | I/O Workspace (Timer & UART Buffers)
                             ; +---------+----+-------------------------------
                             ; | 00:f000 | RO | OS Boot ROM & Interrupt Handlers
                             ; | 00:ffe0 |    | Native Mode Vectors
                             ; | 00:fff0 |    | Emulation Mode Vectors
                             ; +---------+----+-------------------------------
                             ; | 01:0000 | RW | Video
                             ; +---------+----+-------------------------------
                             ; | 02:0000 | RW | SRAM
                             ; | 03:0000 |    |
                             ; +---------+----+-------------------------------
                             ; | 04:0000 | RO | OS Code + Monitor
                             ; | 05:0000 |    | ROM1 (Spare)

Portable 65xx Assembler [19.05]

                             ; | 06:0000 |    | ROM2 (Spare)
                             ; | 07:0000 |    | ROM3 (Spare)
                             ; +---------+----+-------------------------------
                             ;
                             ;
                             ;-------------------------------------------------------------------------------

                                             .65816

                                             .include "../w65c816.inc"
                             ;==============================================================================
                             ; __        ____  ____   ____ ___  _  __
                             ; \ \      / / /_| ___| / ___( _ )/ |/ /_
                             ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \
                             ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
                             ;    \_/\_/  \___/____/ \____\___/|_|\___/
                             ;
                             ; Western Design Center W65C816 device definitions
                             ;------------------------------------------------------------------------------
                             ; Copyright (C)2015-2019 HandCoded Software Ltd.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; Various macros and definitions for the W65C816 microprocessor.
                             ;
                             ;===============================================================================
                             ; Revision History:
                             ;
                             ; 2015-12-18 AJ Initial version
                             ;-------------------------------------------------------------------------------

                             ;==============================================================================
                             ; Status Register Bits
                             ;------------------------------------------------------------------------------

         00000080          = N_FLAG          .equ    1<<7
         00000040          = V_FLAG          .equ    1<<6
         00000020          = M_FLAG          .equ    1<<5
         00000010          = X_FLAG          .equ    1<<4
         00000010          = B_FLAG          .equ    1<<4
         00000008          = D_FLAG          .equ    1<<3
         00000004          = I_FLAG          .equ    1<<2
         00000002          = Z_FLAG          .equ    1<<1
         00000001          = C_FLAG          .equ    1<<0

                             ;==============================================================================

Portable 65xx Assembler [19.05]

                             ; Macros
                             ;------------------------------------------------------------------------------

                             ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
                             ; is fixed at $0100-$01ff.

                             emulate         .macro
                                             sec
                                             xce
                                             .endm

                             ; Puts the processor in native mode. The size of the memory and index register
                             ; operations is not controlled by the M & X bits in the status register.

                             native          .macro
                                             clc
                                             xce
                                             .endm

                             ; Resets the M bit making the accumulator and memory accesses 16-bits wide.

                             long_a          .macro
                                             rep     #M_FLAG
                                             .longa  on
                                             .endm

                             ; Resets the X bit making the index registers 16-bits wide

                             long_i          .macro
                                             rep     #X_FLAG
                                             .longi  on
                                             .endm

                             ; Resets the M and X bits making the accumulator, memory accesses and index
                             ; registers 16-bits wide.

                             long_ai         .macro
                                             rep     #M_FLAG|X_FLAG
                                             .longa  on
                                             .longi  on
                                             .endm

                             ; Sets the M bit making the accumulator and memory accesses 8-bits wide.

                             short_a         .macro
                                             sep     #M_FLAG
                                             .longa  off
                                             .endm

                             ; Sets the X bit making the index registers 8-bits wide.

                             short_i         .macro
                                             sep     #X_FLAG
                                             .longi  off

Portable 65xx Assembler [19.05]

                                             .endm

                             ; Sets the M & X bits making the accumulator, memory accesses and index
                             ; registers 8-bits wide.

                             short_ai        .macro
                                             sep     #M_FLAG|X_FLAG
                                             .longa  off
                                             .longi  off
                                             .endm
                                             .include "../signature.inc"
                             ;===============================================================================
                             ;  _____ __  __        __  ____   ____ ___  _  __
                             ; | ____|  \/  |      / /_| ___| / ___( _ )/ |/ /_
                             ; |  _| | |\/| |_____| '_ \___ \| |   / _ \| | '_ \
                             ; | |___| |  | |_____| (_) |__) | |__| (_) | | (_) |
                             ; |_____|_|__|_|___ __\___/____/ \____\___/|_|\___/
                             ; | ____/ ___||  _ \___ /___ \
                             ; |  _| \___ \| |_) ||_ \ __) |
                             ; | |___ ___) |  __/___) / __/
                             ; |_____|____/|_|  |____/_____|
                             ;
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2018-2019 Andrew John Jacobs
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;===============================================================================
                             ;
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; WDM Signature Bytes
                             ;-------------------------------------------------------------------------------

         00000000          = WDM_IER_RD      .equ    $00
         00000001          = WDM_IER_WR      .equ    $01
         00000002          = WDM_IER_SET     .equ    $02
         00000003          = WDM_IER_CLR     .equ    $03

         00000004          = WDM_IFR_RD      .equ    $04
         00000005          = WDM_IFR_WR      .equ    $05
         00000006          = WDM_IFR_SET     .equ    $06
         00000007          = WDM_IFR_CLR     .equ    $07

         00000008          = WDM_IFLAGS      .equ    $08

         00000010          = WDM_U1TX        .equ    $10

Portable 65xx Assembler [19.05]

         00000011          = WDM_U1RX        .equ    $11

                             ;===============================================================================
                             ; IER/IFR Bits
                             ;-------------------------------------------------------------------------------

         00000001          = INT_CLK         .equ    $0001
         00000002          = INT_U1RX        .equ    $0002
         00000004          = INT_U1TX        .equ    $0004

                             ;===============================================================================
                             ; Macros
                             ;-------------------------------------------------------------------------------

                             MNEM            .macro
                                             .word   ((\0-'@')<<10)|((\1-'@')<<5)|((\2-'@')<<0)
                                             .endm

                             ;===============================================================================
                             ; Constants
                             ;-------------------------------------------------------------------------------

                             ; ASCII Control characters

         00000007          = BEL             .equ    $07
         00000008          = BS              .equ    $08
         0000000A          = LF              .equ    $0a
         0000000D          = CR              .equ    $0d
         0000007F          = DEL             .equ    $7f

                             ;-------------------------------------------------------------------------------

         0000EE00          = MON_PAGE        .equ    $ee00                   ; Monitors private data page
         0000EF00          = IO_PAGE         .equ    $ef00                   ; I/O private data page

         00000040          = UART_BUFSIZ     .equ    64                      ; UART buffer size

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Private I/O Data Area
                             ;-------------------------------------------------------------------------------

                                             .bss
                                             .org    IO_PAGE

00:EF00  00                : TX_HEAD:        .space  1                       ; Transmit buffer head and tail
00:EF01  00                : TX_TAIL:        .space  1                       ; .. indices
00:EF02  00                : RX_HEAD:        .space  1                       ; Receive buffer head and tail
00:EF03  00                : RX_TAIL:        .space  1                       ; .. indices

00:EF04  00000000          : TICK:           .space  4                       ; Clock tick counter

00:EF08  0000000000000000> : TX_DATA:        .space  UART_BUFSIZ             ; Uart transmit buffer
00:EF48  0000000000000000> : RX_DATA:        .space  UART_BUFSIZ             ; Uart receive buffer

                                             .if     $ > $efff
                                             .error  "Exceeded I/O Page size"
                                             .endif

                             ;===============================================================================
                             ; Operating System Entry Points
                             ;-------------------------------------------------------------------------------
                                             .code
                                             .org    $f000

00:F000  826900            :                 brl     Uart1Tx                 ; JSL $f000 - UART1 Transmit
00:F003  829400            :                 brl     Uart1Rx                 ; JSL $f003 - UART1 Receive

                             ;===============================================================================
                             ; API Entry
                             ;-------------------------------------------------------------------------------

                             COPE:
00:F006  60                :                 rts
                             COPN:
00:F007  6B                :                 rtl

                             ;===============================================================================
                             ; Power On Reset
                             ;-------------------------------------------------------------------------------

                                             .longa  off
                                             .longi  off
                             RESET:
00:F008  78                :                 sei                             ; Ensure no interrupts
00:F009  D8                :                 cld

00:F00A  A208              :                 ldx     #8                      ; Clear FIFO indexes and timer
                                             repeat
00:F00C  CA                :                  dex
00:F00D  9E00EF            :                  stz    IO_PAGE,x
00:F010  D0FA              :                 until eq

Portable 65xx Assembler [19.05]


00:F012  18                :                 clc                             ; Switch to native mode
00:F013  FB                :                 xce

                                             long_ai
00:F014  C230              +                 rep     #M_FLAG|X_FLAG
                           +                 .longa  on
                           +                 .longi  on
00:F016  A2FF0F            :                 ldx     #$0fff                  ; Set O/S stack
00:F019  9A                :                 txs
00:F01A  A90300            :                 lda     #INT_CLK|INT_U1RX       ; Enable clock and receive
00:F01D  4201              :                 wdm     #WDM_IER_WR
00:F01F  58                :                 cli                             ; Allow interrupts

                                             short_a                         ; Display a boot message
00:F020  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:F022  A234F0            :                 ldx     #BOOT_MESSAGE
                                             repeat
00:F025  BD0000            :                  lda    !0,x
00:F028  F007              :                  break eq
00:F02A  226CF000          :                  jsl    Uart1Tx
00:F02E  E8                :                  inx
00:F02F  80F4              :                 forever

00:F031  0000              :                 brk     #0                      ; Then enter the monitor
00:F033  DB                :                 stp

00:F034  0D0A454D2D363543> : BOOT_MESSAGE:   .byte   CR,LF,"EM-65C816-ESP32 [19.06]"
00:F04D  0D0A284329323031> :                 .byte   CR,LF,"(C)2018-2019 Andrew Jacobs"
00:F069  0D0A00            :                 .byte   CR,LF,0

                             ;===============================================================================
                             ; Uart1 I/O
                             ;-------------------------------------------------------------------------------

                             ; Transmit the character in A via UART1 regardless of the state of the processor
                             ; and preserve all the registers. If the buffer is full then wait for it to
                             ; drain so there is at least one free space.

                                             .longa  ?
                                             .longi  ?
                             Uart1Tx:
00:F06C  08                :                 php                             ; Save MX bits
00:F06D  DA                :                 phx                             ; .. and X
                                             short_a                         ; Make A/M 8-bits
00:F06E  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:F070  48                :                 pha                             ; Sava A & B
00:F071  EB                :                 xba
00:F072  48                :                 pha
00:F073  AF01EF00          :                 lda     >TX_TAIL                ; Insert data at end of queue
00:F077  AA                :                 tax
00:F078  EB                :                 xba

Portable 65xx Assembler [19.05]

00:F079  9F08EF00          :                 sta     >TX_DATA,x
00:F07D  E8                :                 inx                             ; Bump tail index
00:F07E  8A                :                 txa
00:F07F  293F              :                 and     #UART_BUFSIZ-1          ; .. and wrap
                                             repeat
00:F081  CF00EF00          :                  cmp    >TX_HEAD                ; If buffer is completely full
00:F085  F0FA              :                 until ne                        ; .. wait for it to drain
00:F087  78                :                 sei                             ; Update the tail
00:F088  8F01EF00          :                 sta     >TX_TAIL
00:F08C  A900              :                 lda     #>INT_U1TX              ; Ensure TX interrupt enabled
00:F08E  EB                :                 xba
00:F08F  A904              :                 lda     #<INT_U1TX
00:F091  4202              :                 wdm     #WDM_IER_SET
00:F093  58                :                 cli
00:F094  68                :                 pla                             ; Restore B & A
00:F095  EB                :                 xba
00:F096  68                :                 pla
00:F097  FA                :                 plx                             ; Restore X
00:F098  28                :                 plp                             ; .. and MX flags
00:F099  6B                :                 rtl                             ; Done

                             ; Receive a character from UART1 into A regardless of the state of rhe processor
                             ; preserving all other registers. If the buffer is empty then wait for some data
                             ; to arrive.

                                             .longa  ?
                                             .longi  ?
                             Uart1Rx:
00:F09A  08                :                 php                             ; Save MX bits & x
00:F09B  DA                :                 phx
                                             short_a                         ; Make A/M 8-bit
00:F09C  E220              +                 sep     #M_FLAG
                           +                 .longa  off
                                             repeat
00:F09E  AF02EF00          :                  lda    >RX_HEAD                ; Wait while buffer is empty
00:F0A2  CF03EF00          :                  cmp    >RX_TAIL
00:F0A6  F0F6              :                 until ne
00:F0A8  AA                :                 tax
00:F0A9  BF48EF00          :                 lda     >RX_DATA,x
00:F0AD  48                :                 pha
00:F0AE  E8                :                 inx                             ; Bump head index
00:F0AF  8A                :                 txa
00:F0B0  293F              :                 and     #UART_BUFSIZ-1          ; .. and wrap
00:F0B2  8F02EF00          :                 sta     >RX_HEAD                ; Then update head
00:F0B6  68                :                 pla
00:F0B7  FA                :                 plx                             ; Restore X and flags
00:F0B8  28                :                 plp
00:F0B9  6B                :                 rtl

                             ;===============================================================================
                             ; Interrupt Handlers
                             ;-------------------------------------------------------------------------------

                             ; In emulation mode the interrupt handler must differentiate between IRQ and

Portable 65xx Assembler [19.05]

                             ; BRK.

                                             .longa  off
                                             .longi  off
                             IRQBRK:
00:F0BA  48                :                 pha                             ; Save users A
00:F0BB  A302              :                 lda     2,s                     ; Recover P
00:F0BD  2910              :                 and     #$10
00:F0BF  F005              :                 if ne
00:F0C1  68                :                  pla                            ; Restores users A
00:F0C2  5C000004          : BRKN:            jml    Monitor                 ; Enter the monitor
                                             endif

00:F0C6  EB                :                 xba                             ; Save users B
00:F0C7  48                :                 pha
00:F0C8  DA                :                 phx                             ; .. and X

00:F0C9  20DFF0            :                 jsr     IRQHandler              ; Do common processing

00:F0CC  FA                :                 plx                             ; Restore users X,
00:F0CD  68                :                 pla                             ; .. B, and A
00:F0CE  EB                :                 xba
00:F0CF  68                :                 pla
00:F0D0  40                :                 rti                             ; .. and continue

                             ;-------------------------------------------------------------------------------

                                             .longa  ?
                                             .longi  ?
                             IRQN:
                                             long_ai                         ; Then go full 16-bit
00:F0D1  C230              +                 rep     #M_FLAG|X_FLAG
                           +                 .longa  on
                           +                 .longi  on
00:F0D3  48                :                 pha                             ; .. and save C & X
00:F0D4  DA                :                 phx
                                             short_a                         ; Then make A/M 8-bits
00:F0D5  E220              +                 sep     #M_FLAG
                           +                 .longa  off

00:F0D7  20DFF0            :                 jsr     IRQHandler              ; Do common processing

                                             long_a                          ; Restore users X & C
00:F0DA  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:F0DC  FA                :                 plx
00:F0DD  68                :                 pla
00:F0DE  40                :                 rti                             ; .. and continue

                             ;-------------------------------------------------------------------------------

                             ; This is the main IRQ handler used in both native and emulation mode. The size
                             ; of A/M access is 8-bits but X/Y are undefined. X is used to index into buffer
                             ; areas but is always loaded/stored via A.

Portable 65xx Assembler [19.05]


                                             .longa  off
                                             .longi  ?
                             IRQHandler:
00:F0DF  8B                :                 phb                             ; Save users data bank
00:F0E0  4B                :                 phk                             ; And switch to bank $00
00:F0E1  AB                :                 plb

00:F0E2  4208              :                 wdm     #WDM_IFLAGS             ; Fetch interrupt flags
00:F0E4  48                :                 pha                             ; .. and save some copies
00:F0E5  48                :                 pha

00:F0E6  2901              :                 and     #INT_CLK                ; Is this a timer interrupt?
00:F0E8  F014              :                 if ne
00:F0EA  4207              :                  wdm    #WDM_IFR_CLR            ; Yes, clear it

00:F0EC  EE04EF            :                  inc    TICK+0                  ; Bump the tick counter
00:F0EF  D00D              :                  if eq
00:F0F1  EE05EF            :                   inc   TICK+1
00:F0F4  D008              :                   if eq
00:F0F6  EE06EF            :                    inc  TICK+2
00:F0F9  D003              :                    if eq
00:F0FB  EE07EF            :                     inc TICK+3
                                                endif
                                               endif
                                              endif
                                             endif

00:F0FE  68                :                 pla                             ; Check for received data
00:F0FF  2902              :                 and     #INT_U1RX
00:F101  F015              :                 if ne
00:F103  AD03EF            :                  lda    RX_TAIL                 ; Save at tail of RX buffer
00:F106  AA                :                  tax
00:F107  4211              :                  wdm    #WDM_U1RX
00:F109  9D48EF            :                  sta    RX_DATA,x
00:F10C  E8                :                  inx                            ; Bump the index
00:F10D  8A                :                  txa
00:F10E  293F              :                  and    #UART_BUFSIZ-1          ; .. and wrap
00:F110  CD02EF            :                  cmp    RX_HEAD                 ; Is RX buffer complete full?
00:F113  F003              :                  if ne
00:F115  8D03EF            :                   sta   RX_TAIL                 ; No, save new tail
                                              endif
                                             endif

00:F118  68                :                 pla                             ; Ready to transmit?
00:F119  2904              :                 and     #INT_U1TX
00:F11B  F019              :                 if ne
00:F11D  AD00EF            :                  lda    TX_HEAD                 ; Fetch next character to send
00:F120  AA                :                  tax
00:F121  BD08EF            :                  lda    TX_DATA,x
00:F124  4210              :                  wdm    #WDM_U1TX               ; .. and transmit it
00:F126  E8                :                  inx                            ; Bump the index
00:F127  8A                :                  txa
00:F128  293F              :                  and    #UART_BUFSIZ-1          ; .. and wrap

Portable 65xx Assembler [19.05]

00:F12A  8D00EF            :                  sta    TX_HEAD                 ; Save updated head
00:F12D  CD01EF            :                  cmp    TX_TAIL                 ; Is the buffer now empty?
00:F130  D004              :                  if eq
00:F132  A904              :                   lda   #INT_U1TX
00:F134  4203              :                   wdm   #WDM_IER_CLR            ; Yes disable TX interrupt
                                              endif
                                             endif

00:F136  AB                :                 plb
00:F137  60                :                 rts                             ; Done

                             ;===============================================================================
                             ; Unused Vector Trap
                             ;-------------------------------------------------------------------------------

                             ; If any undefined vectors are invoked execution will end up here doing in an
                             ; infinite loop.

                             UnusedVector
00:F138  DB                :                 stp
00:F139  80FE              :                 bra     $

                             ;===============================================================================
                             ; Vectors
                             ;-------------------------------------------------------------------------------

                             ; Native Mode Vectors

                                             .org    $ffe0

00:FFE0  00000000          :                 .space  4                       ; Reserved
00:FFE4  07F0              :                 .word   COPN                    ; $FFE4 - COP(816)
00:FFE6  C2F0              :                 .word   BRKN                    ; $FFE6 - BRK(816)
00:FFE8  38F1              :                 .word   UnusedVector            ; $FFE8 - ABORT(816)
00:FFEA  38F1              :                 .word   UnusedVector            ; $FFEA - NMI(816)
00:FFEC  0000              :                 .space  2                       ; Reserved
00:FFEE  D1F0              :                 .word   IRQN                    ; $FFEE - IRQ(816)

                             ; Emulation Mode Vectors

                                             .org    $fff0
00:FFF0  00000000          :                 .space  4
00:FFF4  38F1              :                 .word   UnusedVector            ; $FFF4 - COP(C02)
00:FFF6  0000              :                 .space  2                       ; $Reserved
00:FFF8  38F1              :                 .word   UnusedVector            ; $FFF8 - ABORT(C02)
00:FFFA  38F1              :                 .word   UnusedVector            ; $FFFA - NMI(C02)
00:FFFC  08F0              :                 .word   RESET                   ; $FFFC - RESET(C02)
00:FFFE  BAF0              :                 .word   IRQBRK                  ; $FFFE - IRQBRK(C02)

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Video RAM
                             ;-------------------------------------------------------------------------------

                             ; Bank $01 is reserved for video data. The intended display will be 800x600
                             ; monochrome.

         00000320          = SVGA_WIDTH      .equ    800
         00000258          = SVGA_HEIGHT     .equ    600
         00000008          = PIXELS_PER_BYTE .equ    8
         00000064          = BYTES_PER_LINE  .equ    SVGA_WIDTH / PIXELS_PER_BYTE

                                             .bss
                                             .org    $010000

01:0000  0000000000000000> : VLINES          .space  SVGA_HEIGHT * 2         ; Scan line pointers

01:04B0  0000000000000000> : VDATA           .space  SVGA_HEIGHT * BYTES_PER_LINE
                             VEND            .space  0

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Operating System
                             ;-------------------------------------------------------------------------------

                                             .code
                                             .org    $040000

                             ; This is the target area for my operating system ROM.

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Monitor
                             ;-------------------------------------------------------------------------------
                             ; This is a simple monitor based on my SXB-Hacker code. It allows access to the
                             ; emulated address space and the ability to download, inspect, change and run
                             ; machine language programs. It uses the interrupt driven I/O routines in the
                             ; boot ROM accessed by JSLs to $F000 and $F003.
                             ;
                             ; If the monitor is not in use workspace page is never accessed and could be
                             ; used by another application.

                             ;===============================================================================
                             ; Opcodes & Addressing Modes
                             ;-------------------------------------------------------------------------------

         00000000          = OP_ADC          .equ    0<<1
         00000002          = OP_AND          .equ    1<<1
         00000004          = OP_ASL          .equ    2<<1
         00000006          = OP_BCC          .equ    3<<1
         00000008          = OP_BCS          .equ    4<<1
         0000000A          = OP_BEQ          .equ    5<<1
         0000000C          = OP_BIT          .equ    6<<1
         0000000E          = OP_BMI          .equ    7<<1
         00000010          = OP_BNE          .equ    8<<1
         00000012          = OP_BPL          .equ    9<<1
         00000014          = OP_BRA          .equ    10<<1
         00000016          = OP_BRK          .equ    11<<1
         00000018          = OP_BRL          .equ    12<<1
         0000001A          = OP_BVC          .equ    13<<1
         0000001C          = OP_BVS          .equ    14<<1
         0000001E          = OP_CLC          .equ    15<<1
         00000020          = OP_CLD          .equ    16<<1
         00000022          = OP_CLI          .equ    17<<1
         00000024          = OP_CLV          .equ    18<<1
         00000026          = OP_CMP          .equ    19<<1
         00000028          = OP_COP          .equ    20<<1
         0000002A          = OP_CPX          .equ    21<<1
         0000002C          = OP_CPY          .equ    22<<1
         0000002E          = OP_DEC          .equ    23<<1
         00000030          = OP_DEX          .equ    24<<1
         00000032          = OP_DEY          .equ    25<<1
         00000034          = OP_EOR          .equ    26<<1
         00000036          = OP_INC          .equ    27<<1
         00000038          = OP_INX          .equ    28<<1
         0000003A          = OP_INY          .equ    29<<1
         0000003C          = OP_JML          .equ    30<<1
         0000003E          = OP_JMP          .equ    31<<1
         00000040          = OP_JSL          .equ    32<<1
         00000042          = OP_JSR          .equ    33<<1
         00000044          = OP_LDA          .equ    34<<1
         00000046          = OP_LDX          .equ    35<<1
         00000048          = OP_LDY          .equ    36<<1
         0000004A          = OP_LSR          .equ    37<<1
         0000004C          = OP_MVN          .equ    38<<1

Portable 65xx Assembler [19.05]

         0000004E          = OP_MVP          .equ    39<<1
         00000050          = OP_NOP          .equ    40<<1
         00000052          = OP_ORA          .equ    41<<1
         00000054          = OP_PEA          .equ    42<<1
         00000056          = OP_PEI          .equ    43<<1
         00000058          = OP_PER          .equ    44<<1
         0000005A          = OP_PHA          .equ    45<<1
         0000005C          = OP_PHB          .equ    46<<1
         0000005E          = OP_PHD          .equ    47<<1
         00000060          = OP_PHK          .equ    48<<1
         00000062          = OP_PHP          .equ    49<<1
         00000064          = OP_PHX          .equ    50<<1
         00000066          = OP_PHY          .equ    51<<1
         00000068          = OP_PLA          .equ    52<<1
         0000006A          = OP_PLB          .equ    53<<1
         0000006C          = OP_PLD          .equ    54<<1
         0000006E          = OP_PLP          .equ    55<<1
         00000070          = OP_PLX          .equ    56<<1
         00000072          = OP_PLY          .equ    57<<1
         00000074          = OP_REP          .equ    58<<1
         00000076          = OP_ROL          .equ    59<<1
         00000078          = OP_ROR          .equ    60<<1
         0000007A          = OP_RTI          .equ    61<<1
         0000007C          = OP_RTL          .equ    62<<1
         0000007E          = OP_RTS          .equ    63<<1
         00000080          = OP_SBC          .equ    64<<1
         00000082          = OP_SEC          .equ    65<<1
         00000084          = OP_SED          .equ    66<<1
         00000086          = OP_SEI          .equ    67<<1
         00000088          = OP_SEP          .equ    68<<1
         0000008A          = OP_STA          .equ    69<<1
         0000008C          = OP_STP          .equ    70<<1
         0000008E          = OP_STX          .equ    71<<1
         00000090          = OP_STY          .equ    72<<1
         00000092          = OP_STZ          .equ    73<<1
         00000094          = OP_TAX          .equ    74<<1
         00000096          = OP_TAY          .equ    75<<1
         00000098          = OP_TCD          .equ    76<<1
         0000009A          = OP_TCS          .equ    77<<1
         0000009C          = OP_TDC          .equ    78<<1
         0000009E          = OP_TRB          .equ    79<<1
         000000A0          = OP_TSB          .equ    80<<1
         000000A2          = OP_TSC          .equ    81<<1
         000000A4          = OP_TSX          .equ    82<<1
         000000A6          = OP_TXA          .equ    83<<1
         000000A8          = OP_TXS          .equ    84<<1
         000000AA          = OP_TXY          .equ    85<<1
         000000AC          = OP_TYA          .equ    86<<1
         000000AE          = OP_TYX          .equ    87<<1
         000000B0          = OP_WAI          .equ    88<<1
         000000B2          = OP_WDM          .equ    89<<1
         000000B4          = OP_XBA          .equ    90<<1
         000000B6          = OP_XCE          .equ    91<<1


Portable 65xx Assembler [19.05]

         00000000          = MD_ABS          .equ    0<<1                    ; a
         00000002          = MD_ACC          .equ    1<<1                    ; A
         00000004          = MD_ABX          .equ    2<<1                    ; a,x
         00000006          = MD_ABY          .equ    3<<1                    ; a,y
         00000008          = MD_ALG          .equ    4<<1                    ; al
         0000000A          = MD_ALX          .equ    5<<1                    ; al,x
         0000000C          = MD_AIN          .equ    6<<1                    ; (a)
         0000000E          = MD_AIX          .equ    7<<1                    ; (a,x)
         00000010          = MD_DPG          .equ    8<<1                    ; d
         00000012          = MD_STK          .equ    9<<1                    ; d,s
         00000014          = MD_DPX          .equ    10<<1                   ; d,x
         00000016          = MD_DPY          .equ    11<<1                   ; d,x
         00000018          = MD_DIN          .equ    12<<1                   ; (d)
         0000001A          = MD_DLI          .equ    13<<1                   ; [d]
         0000001C          = MD_SKY          .equ    14<<1                   ; (d,s),y
         0000001E          = MD_DIX          .equ    15<<1                   ; (d,x)
         00000020          = MD_DIY          .equ    16<<1                   ; (d),y
         00000022          = MD_DLY          .equ    17<<1                   ; [d],y
         00000024          = MD_IMP          .equ    18<<1                   ;
         00000026          = MD_REL          .equ    19<<1                   ; r
         00000028          = MD_RLG          .equ    20<<1                   ; rl
         0000002A          = MD_MOV          .equ    21<<1                   ; xyc
         0000002C          = MD_IMM          .equ    22<<1                   ; # (A or M)
         0000002E          = MD_INT          .equ    23<<1                   ; # (BRK/COP/WDM)
         00000030          = MD_IMX          .equ    24<<1                   ; # (X or Y)

                             ;===============================================================================
                             ; Private Data Area
                             ;-------------------------------------------------------------------------------

                                             .bss
                                             .org    $00ee00

                             ; User Registers

00:EE00  00                : REG_E           .space  1                       ; In bit 7
00:EE01  00                : REG_P           .space  1
00:EE02  0000              : REG_C           .space  2
00:EE04  0000              : REG_X           .space  2
00:EE06  0000              : REG_Y           .space  2
00:EE08  0000              : REG_SP          .space  2
00:EE0A  0000              : REG_DP          .space  2
00:EE0C  0000              : REG_PC          .space  2
00:EE0E  00                : REG_PBR         .space  1
00:EE0F  00                : REG_DBR         .space  1

00:EE10  00                : CMD_LEN         .space  1                       ; Command buffer length
00:EE11  00                : DEFAULT         .space  1                       ; Default bank (DBR on entry)
00:EE12  000000            : VALUE           .space  3

00:EE15  000000            : ADDR_S          .space  3
00:EE18  000000            : ADDR_E          .space  3

00:EE1B  0000000000000000> :                 .align  128                     ; Gap used for stack

Portable 65xx Assembler [19.05]

00:EE80  0000000000000000> : CMD_BUF         .space  128                     ; Command buffer

                             ;-------------------------------------------------------------------------------

                             ; The entry point is called from the boot ROM when a BRK instruction is executed
                             ; in either emulation or native mode.

                                             .code
                                             .longa  ?
                                             .longi  ?
                                             .dpage  REG_E
                             Monitor:
                                             short_a                         ; Ensure A/M 8-bits
04:0000  E220              +                 sep     #M_FLAG
                           +                 .longa  off
04:0002  0B                :                 phd                             ; Push users DP
04:0003  F400EE            :                 pea     #REG_E                  ; Move to monitor's direct page
04:0006  2B                :                 pld
04:0007  8502              :                 sta     REG_C+0                 ; Save C
04:0009  EB                :                 xba
04:000A  8503              :                 sta     REG_C+1
04:000C  68                :                 pla                             ; Save DP
04:000D  850A              :                 sta     REG_DP+0
04:000F  68                :                 pla
04:0010  850B              :                 sta     REG_DP+1
04:0012  68                :                 pla                             ; Save P
04:0013  8501              :                 sta     REG_P
04:0015  38                :                 sec                             ; Save PC (adjusting for BRK)
04:0016  68                :                 pla
04:0017  E902              :                 sbc     #2
04:0019  850C              :                 sta     REG_PC+0
04:001B  68                :                 pla
04:001C  E900              :                 sbc     #0
04:001E  850D              :                 sta     REG_PC+1
04:0020  18                :                 clc                             ; Switch to native mode
04:0021  FB                :                 xce
04:0022  640E              :                 stz     REG_PBR
04:0024  B003              :                 if cc
04:0026  68                :                  pla
04:0027  850E              :                  sta    REG_PBR                 ; Save PBR
                                             endif
04:0029  6600              :                 ror     REG_E                   ; Save E
04:002B  8B                :                 phb                             ; Save DBR
04:002C  68                :                 pla
04:002D  850F              :                 sta     REG_DBR
04:002F  8511              :                 sta     DEFAULT
                                             long_i
04:0031  C210              +                 rep     #X_FLAG
                           +                 .longi  on
04:0033  8604              :                 stx     REG_X                   ; Save X
04:0035  8406              :                 sty     REG_Y                   ; Save Y
04:0037  BA                :                 tsx
04:0038  8608              :                 stx     REG_SP                  ; Save SP
04:003A  A27FEE            :                 ldx     #CMD_BUF-1              ; .. then load ours

Portable 65xx Assembler [19.05]

04:003D  9A                :                 txs

04:003E  4B                :                 phk                             ; Set DBR to this bank (to
04:003F  AB                :                 plb                             ; .. access data and strings)
04:0040  58                :                 cli                             ; And allow interrupts

                             ;-------------------------------------------------------------------------------

                             ; Show the state of the users registers when the BRK was executed.

                             .ShowRegisters:
04:0041  201604            :                 jsr     .NewLine

04:0044  A26E04            :                 ldx     #.StrPC
04:0047  200A04            :                 jsr     .Print
04:004A  A50E              :                 lda     REG_PBR                 ; Show PBR and PC
04:004C  203404            :                 jsr     .Hex2
04:004F  A93A              :                 lda     #':'
04:0051  204C04            :                 jsr     .UartTx
04:0054  A50D              :                 lda     REG_PC+1
04:0056  EB                :                 xba
04:0057  A50C              :                 lda     REG_PC+0
04:0059  202F04            :                 jsr     .Hex4

04:005C  A27204            :                 ldx     #.StrE                  ; Show E bit
04:005F  200A04            :                 jsr     .Print
04:0062  A930              :                 lda     #'0'
04:0064  2400              :                 bit     REG_E
04:0066  1001              :                 if mi
04:0068  1A                :                  inc    a
                                             endif
04:0069  204C04            :                 jsr     .UartTx

04:006C  A27604            :                 ldx     #.StrP                  ; Show P
04:006F  200A04            :                 jsr     .Print
04:0072  A20700            :                 ldx     #7
                                             repeat
04:0075  BD6604            :                  lda    .Mask,x                 ; .. as individual flags
04:0078  2501              :                  and    REG_P
04:007A  08                :                  php
04:007B  BD5E04            :                  lda    .Flag,x
04:007E  28                :                  plp
04:007F  D002              :                  if eq
04:0081  A92E              :                   lda   #'.'
                                              endif
04:0083  204C04            :                  jsr    .UartTx
04:0086  CA                :                  dex
04:0087  10EC              :                 until mi

04:0089  A27A04            :                 ldx     #.StrC                  ; Show C
04:008C  200A04            :                 jsr     .Print
04:008F  2400              :                 bit     REG_E
04:0091  300E              :                 bmi     .ShortA
04:0093  A920              :                 lda     #M_FLAG

Portable 65xx Assembler [19.05]

04:0095  2401              :                 bit     REG_P
04:0097  D008              :                 if eq
04:0099  205104            :                  jsr    .OpenBracket
04:009C  201F04            :                  jsr    .HexCHi
04:009F  8006              :                 else
04:00A1  201F04            : .ShortA:         jsr    .HexCHi
04:00A4  205104            :                  jsr    .OpenBracket
                                             endif
04:00A7  A502              :                 lda     REG_C+0
04:00A9  203404            :                 jsr     .Hex2
04:00AC  205504            :                 jsr     .CloseBracket

04:00AF  A27E04            :                 ldx     #.StrX                  ; Show X
04:00B2  200A04            :                 jsr     .Print
04:00B5  2400              :                 bit     REG_E
04:00B7  300E              :                 bmi     .ShortX
04:00B9  A910              :                 lda     #X_FLAG
04:00BB  2401              :                 bit     REG_P
04:00BD  D008              :                 if eq
04:00BF  205104            :                  jsr    .OpenBracket
04:00C2  202304            :                  jsr    .HexXHi
04:00C5  8006              :                 else
04:00C7  202304            : .ShortX:         jsr    .HexXHi
04:00CA  205104            :                  jsr    .OpenBracket
                                             endif
04:00CD  A504              :                 lda     REG_X+0
04:00CF  203404            :                 jsr     .Hex2
04:00D2  205504            :                 jsr     .CloseBracket

04:00D5  A28204            :                 ldx     #.StrY                  ; Show Y
04:00D8  200A04            :                 jsr     .Print
04:00DB  2400              :                 bit     REG_E
04:00DD  300E              :                 bmi     .ShortY
04:00DF  A910              :                 lda     #X_FLAG
04:00E1  2401              :                 bit     REG_P
04:00E3  D008              :                 if eq
04:00E5  205104            :                  jsr    .OpenBracket
04:00E8  202704            :                  jsr    .HexYHi
04:00EB  8006              :                 else
04:00ED  202704            : .ShortY:         jsr    .HexYHi
04:00F0  205104            :                  jsr    .OpenBracket
                                             endif
04:00F3  A506              :                 lda     REG_Y+0
04:00F5  203404            :                 jsr     .Hex2
04:00F8  205504            :                 jsr     .CloseBracket

04:00FB  A28604            :                 ldx     #.StrDP                 ; Show DP
04:00FE  200A04            :                 jsr     .Print
04:0101  A50B              :                 lda     REG_DP+1
04:0103  EB                :                 xba
04:0104  A50A              :                 lda     REG_DP+0
04:0106  202F04            :                 jsr     .Hex4

04:0109  A28B04            :                 ldx     #.StrSP                 ; Show SP

Portable 65xx Assembler [19.05]

04:010C  200A04            :                 jsr     .Print
04:010F  2400              :                 bit     REG_E
04:0111  1008              :                 if mi
04:0113  202B04            :                  jsr    .HexSPHi
04:0116  205104            :                  jsr    .OpenBracket
04:0119  8006              :                 else
04:011B  205104            :                  jsr    .OpenBracket
04:011E  202B04            :                  jsr    .HexSPHi
                                             endif
04:0121  A508              :                 lda     REG_SP+0
04:0123  203404            :                 jsr     .Hex2
04:0126  205504            :                 jsr     .CloseBracket

04:0129  A29004            :                 ldx     #.StrDBR                ; Show DBR
04:012C  200A04            :                 jsr     .Print
04:012F  A50F              :                 lda     REG_DBR
04:0131  203404            :                 jsr     .Hex2

                             ;-------------------------------------------------------------------------------

                             ; Read a command from the user into the buffer area. Pressing either BS or DEL
                             ; erases the last character.

                             .NewCommand:
04:0134  6410              :                 stz     CMD_LEN                 ; Clear command buffer
                             .OldCommand:
04:0136  201604            :                 jsr     .NewLine                ; Print the entry prompt
04:0139  A92E              :                 lda     #'.'
04:013B  204C04            :                 jsr     .UartTx

04:013E  A20000            :                 ldx     #0
                                             repeat
04:0141  8A                :                  txa
04:0142  C510              :                  cmp    CMD_LEN                 ; Any forced characters?
04:0144  F008              :                  break  eq
04:0146  B580              :                  lda    CMD_BUF,x               ; Yes, print one
04:0148  204C04            :                  jsr    .UartTx
04:014B  E8                :                  inx
04:014C  80F3              :                 forever

                                             repeat
04:014E  205904            :                  jsr    .UartRx                 ; Read a real character
04:0151  9580              :                  sta    CMD_BUF,x               ; .. and save it

04:0153  C908              :                  cmp    #BS                     ; Map BS to DEL
04:0155  F00C              :                  beq    .BackSpace
04:0157  C90D              :                  cmp    #CR                     ; End of input?
04:0159  F024              :                  break  eq

04:015B  C920              :                  cmp    #' '                    ; Printable?
04:015D  9019              :                  if cs
04:015F  C97F              :                   cmp   #DEL                    ; Delete?
04:0161  9012              :                   if cs
04:0163  8A                : .BackSpace:        txa                          ; Is buffer empty?

Portable 65xx Assembler [19.05]

04:0164  F012              :                    beq  .Beep                   ; Yes, make a noise

04:0166  A908              :                    lda  #BS                     ; Erase the last character
04:0168  204C04            :                    jsr  .UartTx
04:016B  A920              :                    lda  #' '
04:016D  204C04            :                    jsr  .UartTx
04:0170  A908              :                    lda  #BS
04:0172  CA                :                    dex
04:0173  8001              :                   else
04:0175  E8                :                    inx                          ; Keep the last character
                                               endif
04:0176  8002              :                  else
04:0178  A907              : .Beep:            lda   #BEL
                                              endif
04:017A  204C04            :                  jsr    .UartTx                 ; And echo char, BEL or BS
04:017D  80CF              :                 forever

04:017F  8A                :                 txa                             ; Save the buffer length
04:0180  8510              :                 sta     CMD_LEN

04:0182  A20000            :                 ldx     #0                      ; Set character index
04:0185  20B603            :                 jsr     .SkipSpaces             ; And get command

04:0188  C90D              :                 cmp     #CR
04:018A  F0A8              :                 beq     .NewCommand

                             ;-------------------------------------------------------------------------------
                             ; Print Help

04:018C  C93F              :                 cmp     #'?'
04:018E  D008              :                 if eq
04:0190  A2C504            :                  ldx    #.StrHelp
04:0193  200A04            :                  jsr    .Print
04:0196  809C              :                  bra    .NewCommand
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; Disassemble

04:0198  C944              :                 cmp     #'D'
04:019A  D003              :                 if eq

04:019C  4C3401            :                  jmp    .NewCommand
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; Go

04:019F  C947              :                 cmp     #'G'
04:01A1  D041              :                 if eq
04:01A3  20DD02            :                  jsr    .GetValue               ; Try to get address
04:01A6  9014              :                  if cs
04:01A8  6600              :                   ror   <REG_E                  ; None, perform reset
04:01AA  AFFCFF00          :                   lda   >$00fffc

Portable 65xx Assembler [19.05]

04:01AE  8512              :                   sta   <VALUE+0
04:01B0  AFFDFF00          :                   lda   >$00fffd
04:01B4  8513              :                   sta   <VALUE+1
04:01B6  6414              :                   stz   <VALUE+2
04:01B8  640A              :                   stz   <REG_DP+0               ; Clear DP
04:01BA  640B              :                   stz   <REG_DP+1
                                              endif

04:01BC  78                :                  sei
04:01BD  A608              :                  ldx    <REG_SP                 ; Restore user stack
04:01BF  9A                :                  txs

04:01C0  2400              :                  bit    <REG_E                  ; Push PBR if native mode
04:01C2  3003              :                  if pl
04:01C4  A514              :                   lda   <VALUE+2
04:01C6  48                :                   pha
                                              endif
04:01C7  A513              :                  lda    <VALUE+1                ; Then PC
04:01C9  48                :                  pha
04:01CA  A512              :                  lda    <VALUE+0
04:01CC  48                :                  pha
04:01CD  A501              :                  lda    <REG_P                  ; And flags
04:01CF  48                :                  pha
04:01D0  A50B              :                  lda    <REG_DP+1               ; Push DP
04:01D2  48                :                  pha
04:01D3  A50A              :                  lda    <REG_DP+0
04:01D5  48                :                  pha
04:01D6  A604              :                  ldx    <REG_X                  ; Restore X, Y and C
04:01D8  A406              :                  ldy    <REG_Y
04:01DA  A503              :                  lda    <REG_C+1
04:01DC  EB                :                  xba
04:01DD  A502              :                  lda    <REG_C+0
04:01DF  2600              :                  rol    <REG_E                  ; Restore CPU mode
04:01E1  FB                :                  xce
04:01E2  2B                :                  pld                            ; Pull DP
04:01E3  40                :                  rti                            ; And start execution
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; Memory

04:01E4  C94D              :                 cmp     #'M'
04:01E6  D070              :                 if eq
04:01E8  20DD02            :                  jsr    .GetValue               ; Get start address
04:01EB  B068              :                  if cc
04:01ED  207C03            :                   jsr   .CopyToStart
04:01F0  20DD02            :                   jsr   .GetValue
04:01F3  208903            :                   jsr   .CopyToEnd

                                               repeat
04:01F6  201604            :                    jsr  .NewLine                ; Print the address
04:01F9  A517              :                    lda  <ADDR_S+2
04:01FB  203404            :                    jsr  .Hex2
04:01FE  A93A              :                    lda  #':'

Portable 65xx Assembler [19.05]

04:0200  204C04            :                    jsr  .UartTx
04:0203  A516              :                    lda  <ADDR_S+1
04:0205  EB                :                    xba
04:0206  A515              :                    lda  <ADDR_S+0
04:0208  202F04            :                    jsr  .Hex4

04:020B  A00000            :                    ldy  #0
                                                repeat                       ; Then 16 bytes of data
04:020E  A920              :                     lda #' '
04:0210  204C04            :                     jsr .UartTx
04:0213  B715              :                     lda [ADDR_S],y
04:0215  203404            :                     jsr .Hex2
04:0218  C8                :                     iny
04:0219  C01000            :                     cpy #16
04:021C  D0F0              :                    until eq

04:021E  A920              :                    lda  #' '                    ; Show as ASCII
04:0220  204C04            :                    jsr  .UartTx
04:0223  A97C              :                    lda  #'|'
04:0225  204C04            :                    jsr  .UartTx

04:0228  A00000            :                    ldy  #0
                                                repeat
04:022B  B715              :                     lda [ADDR_S],y
04:022D  C920              :                     cmp #' '
04:022F  B002              :                     if cc
04:0231  A92E              :                      lda #'.'
                                                 endif
04:0233  C97F              :                     cmp #DEL
04:0235  9002              :                     if cs
04:0237  A92E              :                      lda #'.'
                                                 endif
04:0239  204C04            :                     jsr .UartTx
04:023C  C8                :                     iny
04:023D  C01000            :                     cpy #16
04:0240  D0E9              :                    until eq
04:0242  A97C              :                    lda  #'|'
04:0244  204C04            :                    jsr  .UartTx

04:0247  98                :                    tya                          ; Update the address
04:0248  209603            :                    jsr  .BumpAddress
04:024B  B005              :                    break cs
04:024D  20A803            :                    jsr  .CompareAddr
04:0250  B0A4              :                   until cc

04:0252  4C3401            :                   jmp   .NewCommand
                                              endif
04:0255  4CD402            :                  jmp    .ShowError
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; Quit

04:0258  C951              :                 cmp     #'Q'

Portable 65xx Assembler [19.05]

04:025A  D001              :                 if eq
04:025C  DB                :                  stp
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; Registers

04:025D  C952              :                 cmp     #'R'
04:025F  D003              :                 if eq
04:0261  4C4100            :                  jmp    .ShowRegisters
                                             endif

                             ;-------------------------------------------------------------------------------
                             ; S28 SRECORD loader

04:0264  C953              :                 cmp     #'S'
04:0266  D047              :                 if eq
04:0268  20BE03            :                  jsr    .NextChar
04:026B  C932              :                  cmp    #'2'                    ; Only process type '2'
04:026D  D034              :                  if eq
04:026F  202803            :                   jsr   .GetByte                ; Get the byte count
04:0272  B032              :                   bcs   .InvalidRecord
04:0274  3A                :                   dec   a                       ; Ignore address and checksum
04:0275  3A                :                   dec   a
04:0276  3A                :                   dec   a
04:0277  3A                :                   dec   a
04:0278  F02C              :                   beq   .InvalidRecord
04:027A  302A              :                   bmi   .InvalidRecord
04:027C  8514              :                   sta   <VALUE+2
04:027E  202803            :                   jsr   .GetByte                ; Get target address
04:0281  B023              :                   bcs   .InvalidRecord
04:0283  8517              :                   sta   <ADDR_S+2
04:0285  202803            :                   jsr   .GetByte
04:0288  B01C              :                   bcs   .InvalidRecord
04:028A  8516              :                   sta   <ADDR_S+1
04:028C  202803            :                   jsr   .GetByte
04:028F  B015              :                   bcs   .InvalidRecord
04:0291  8515              :                   sta   <ADDR_S+0

                                               repeat
04:0293  202803            :                    jsr  .GetByte                ; Get a data byte
04:0296  B00E              :                    bcs  .InvalidRecord
04:0298  8715              :                    sta  [ADDR_S]                ; .. and write to memory
04:029A  A901              :                    lda  #1
04:029C  209603            :                    jsr  .BumpAddress
04:029F  C614              :                    dec  <VALUE+2
04:02A1  D0F0              :                   until eq
                                              endif
04:02A3  4C3401            :                  jmp    .NewCommand
                             .InvalidRecord:
04:02A6  A2B004            :                  ldx    #.StrInvalid            ; Print the error string
04:02A9  200A04            :                  jsr    .Print
04:02AC  4C3401            :                  jmp    .NewCommand
                                             endif

Portable 65xx Assembler [19.05]


                             ;-------------------------------------------------------------------------------

04:02AF  C957              :                 cmp     #'W'
04:02B1  D021              :                 if eq
04:02B3  20DD02            :                  jsr    .GetValue               ; Get start address
04:02B6  B019              :                  if cc
04:02B8  207C03            :                   jsr   .CopyToStart
04:02BB  20DD02            :                   jsr   .GetValue
04:02BE  B00E              :                   if cc
04:02C0  A512              :                    lda  <VALUE+0
04:02C2  8715              :                    sta  [ADDR_S]

04:02C4  A901              :                    lda  #1
04:02C6  209603            :                    jsr  .BumpAddress

04:02C9  A957              :                    lda  #'W'
04:02CB  4CD003            :                    jmp  .BuildCommand
                                               endif
04:02CE  4C3401            :                   jmp   .NewCommand
                                              endif
04:02D1  4CD402            :                  jmp    .ShowError
                                             endif

                             ;-------------------------------------------------------------------------------

                             .ShowError
04:02D4  A29604            :                 ldx     #.StrError              ; Print the error string
04:02D7  200A04            :                 jsr     .Print
04:02DA  4C3401            :                 jmp     .NewCommand

                             ;-------------------------------------------------------------------------------

                             ; Parse a value in for [x[x]:]x[x][x][x] from the command line. if no bank is
                             ; given use the current default bank.

                                             .longa  off
                                             .longi  on
                             .GetValue:
04:02DD  6412              :                 stz     <VALUE+0                ; Clear result area
04:02DF  6413              :                 stz     <VALUE+1
04:02E1  A511              :                 lda     <DEFAULT                ; Assume default bank
04:02E3  8514              :                 sta     <VALUE+2

04:02E5  20B603            :                 jsr     .SkipSpaces             ; Find first digit
04:02E8  204303            :                 jsr     .AddHexDigit
04:02EB  9001              :                 if cs
04:02ED  60                :                  rts                            ; None, syntax error
                                             endif
04:02EE  20BE03            :                 jsr     .NextChar               ; Try for a second
04:02F1  C93A              :                 cmp     #':'
04:02F3  F00C              :                 beq     .FoundBank              ; End of bank
04:02F5  204303            :                 jsr     .AddHexDigit
04:02F8  B02C              :                 bcs     .ReturnValue

Portable 65xx Assembler [19.05]

04:02FA  20BE03            :                 jsr     .NextChar               ; Try for a third
04:02FD  C93A              :                 cmp     #':'
04:02FF  D01A              :                 if eq
                             .FoundBank:
04:0301  A512              :                  lda    <VALUE+0                ; Set the bank
04:0303  8514              :                  sta    <VALUE+2
04:0305  6412              :                  stz    <VALUE+0
04:0307  20BE03            :                  jsr    .NextChar               ; Must be followed by digit
04:030A  204303            :                  jsr    .AddHexDigit
04:030D  9001              :                  if cs
04:030F  60                :                   rts
                                              endif
04:0310  20BE03            :                  jsr    .NextChar
04:0313  204303            :                  jsr    .AddHexDigit
04:0316  B00E              :                  bcs    .ReturnValue
04:0318  20BE03            :                  jsr    .NextChar
                                             endif
04:031B  204303            :                 jsr     .AddHexDigit            ; Must be offset within bank
04:031E  B006              :                 bcs     .ReturnValue
04:0320  20BE03            :                 jsr     .NextChar
04:0323  204303            :                 jsr     .AddHexDigit
04:0326  18                : .ReturnValue:   clc
04:0327  60                :                 rts

                             ; Parse a byte  from the command line and return it in A. Set the carry if a
                             ; non-hex digit is found.

                             .GetByte:
04:0328  6412              :                 stz     <VALUE+0
04:032A  20BE03            :                 jsr     .NextChar
04:032D  206303            :                 jsr     .HexDigit
04:0330  B010              :                 if cc
04:0332  0A                :                  asl    a
04:0333  0A                :                  asl    a
04:0334  0A                :                  asl    a
04:0335  0A                :                  asl    a
04:0336  8512              :                  sta    <VALUE
04:0338  20BE03            :                  jsr    .NextChar
04:033B  206303            :                  jsr    .HexDigit
04:033E  B002              :                  if cc
04:0340  0512              :                   ora   <VALUE+0
                                              endif
                                             endif
04:0342  60                :                 rts

                             ; If the character in A is a hex digit then work it into the value being
                             ; parsed from the line.

                                             .longa  off
                             .AddHexDigit:
04:0343  206303            :                 jsr     .HexDigit
04:0346  B01A              :                 if cc
04:0348  0612              :                  asl    <VALUE+0                ; Shift up the value
04:034A  2613              :                  rol    <VALUE+1

Portable 65xx Assembler [19.05]

04:034C  0612              :                  asl    <VALUE+0
04:034E  2613              :                  rol    <VALUE+1
04:0350  0612              :                  asl    <VALUE+0
04:0352  2613              :                  rol    <VALUE+1
04:0354  0612              :                  asl    <VALUE+0
04:0356  2613              :                  rol    <VALUE+1
04:0358  18                :                  clc
04:0359  6512              :                  adc    <VALUE+0
04:035B  8512              :                  sta    <VALUE+0
04:035D  9002              :                  if cs
04:035F  E613              :                   inc   <VALUE+1
                                              endif
04:0361  18                :                  clc
                                             endif
04:0362  60                :                 rts

                             ; Returns with the carry clear if the character in A on entry was a hexidecimal
                             ; digit and replaces it with its value.

                                             .longa  off
                             .HexDigit:
04:0363  C930              :                 cmp     #'0'                    ; Numeric digit?
04:0365  9013              :                 if cs
04:0367  C93A              :                  cmp    #'9'+1
04:0369  B003              :                  if cc
04:036B  290F              :                   and   #$0f                    ; Yes, strip out low nybble
04:036D  60                :                   rts
                                              endif

04:036E  C941              :                  cmp    #'A'                    ; Letter A thru F?
04:0370  9008              :                  if cs
04:0372  C947              :                   cmp   #'F'+1
04:0374  B004              :                   if cc
04:0376  E936              :                    sbc  #'A'-11                 ; Yes.
04:0378  18                :                    clc
04:0379  60                :                    rts
                                               endif
                                              endif
                                             endif
04:037A  38                :                 sec                             ; No.
04:037B  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; Copy the last parsed value into the start address.

                                             .longa off
                             .CopyToStart:
04:037C  A512              :                 lda     <VALUE+0
04:037E  8515              :                 sta     <ADDR_S+0
04:0380  A513              :                 lda     <VALUE+1
04:0382  8516              :                 sta     <ADDR_S+1
04:0384  A514              :                 lda     <VALUE+2
04:0386  8517              :                 sta     <ADDR_S+2

Portable 65xx Assembler [19.05]

04:0388  60                :                 rts

                             ; Copy the last parsed value into the end address.

                                             .longa off
                             .CopyToEnd:
04:0389  A512              :                 lda     <VALUE+0
04:038B  8518              :                 sta     <ADDR_E+0
04:038D  A513              :                 lda     <VALUE+1
04:038F  8519              :                 sta     <ADDR_E+1
04:0391  A514              :                 lda     <VALUE+2
04:0393  851A              :                 sta     <ADDR_E+2
04:0395  60                :                 rts

                             ; Add the value in A to the current start address. On return if the carry
                             ; is set then the address wrapped around.

                             .BumpAddress:
04:0396  18                :                 clc
04:0397  6515              :                 adc     <ADDR_S+0
04:0399  8515              :                 sta     <ADDR_S+0
04:039B  A900              :                 lda     #0
04:039D  6516              :                 adc     <ADDR_S+1
04:039F  8516              :                 sta     <ADDR_S+1
04:03A1  A900              :                 lda     #0
04:03A3  6517              :                 adc     <ADDR_S+2
04:03A5  8517              :                 sta     <ADDR_S+2
04:03A7  60                :                 rts

                             ; Compare the start and end addresses. Return with carry clear when the start
                             ; is bigger than the end.

                             .CompareAddr:
04:03A8  38                :                 sec
04:03A9  A518              :                 lda     <ADDR_E+0
04:03AB  E515              :                 sbc     <ADDR_S+0
04:03AD  A519              :                 lda     <ADDR_E+1
04:03AF  E516              :                 sbc     <ADDR_S+1
04:03B1  A51A              :                 lda     <ADDR_E+2
04:03B3  E517              :                 sbc     <ADDR_S+2
04:03B5  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; Return the next character on the command line line that is not a space.

                                             .longa  off
                                             .longi  on
                             .SkipSpaces:
                                             repeat
04:03B6  20BE03            :                  jsr    .NextChar
04:03B9  C920              :                  cmp #' '                       ; .. until a non-space
04:03BB  F0F9              :                 until ne
04:03BD  60                :                 rts                             ; Done

Portable 65xx Assembler [19.05]


                             ; Return the next character from the command line converting it to UPPER case.

                                             .longa  off
                             .NextChar:
04:03BE  B580              :                 lda     <CMD_BUF,x              ; Fetch a character
04:03C0  C90D              :                 cmp     #CR
04:03C2  F001              :                 if ne
04:03C4  E8                :                  inx
                                             endif
                             .ToUpper:
04:03C5  C961              :                 cmp     #'a'                    ; If A is 'a'..'z'
04:03C7  9006              :                 if cs
04:03C9  C97B              :                  cmp    #'z'+1
04:03CB  B002              :                  if cc
04:03CD  E91F              :                   sbc   #31                     ; .. then capitalise
                                              endif
                                             endif
04:03CF  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             .BuildCommand:
04:03D0  A20000            :                 ldx     #0
04:03D3  200604            :                 jsr     .AddChar
04:03D6  A920              :                 lda     #' '
04:03D8  200604            :                 jsr     .AddChar
04:03DB  A514              :                 lda     <VALUE+2
04:03DD  20FA03            :                 jsr     .AddHex2
04:03E0  A93A              :                 lda     #':'
04:03E2  200604            :                 jsr     .AddChar
04:03E5  A513              :                 lda     <VALUE+1
04:03E7  20FA03            :                 jsr     .AddHex2
04:03EA  A512              :                 lda     <VALUE+0
04:03EC  20FA03            :                 jsr     .AddHex2
04:03EF  A920              :                 lda     #' '
04:03F1  200604            :                 jsr     .AddChar
04:03F4  8A                :                 txa
04:03F5  8510              :                 sta     CMD_LEN
04:03F7  4C3601            :                 jmp     .OldCommand

                             .AddHex2:
04:03FA  48                :                 pha
04:03FB  4A                :                 lsr     a
04:03FC  4A                :                 lsr     a
04:03FD  4A                :                 lsr     a
04:03FE  4A                :                 lsr     a
04:03FF  200304            :                 jsr     .AddHex
04:0402  68                :                 pla
                             .AddHex:
04:0403  204204            :                 jsr     .ToHex
                             .AddChar:
04:0406  9580              :                 sta     <CMD_BUF,x
04:0408  E8                :                 inx

Portable 65xx Assembler [19.05]

04:0409  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; Print the null terminated string pointed to the address in the X register to
                             ; the UART.

                                             .longa  off
                                             .longi  on
                             .Print:
                                             repeat
04:040A  BD0000            :                  lda    !0,x
04:040D  D001              :                  if eq
04:040F  60                :                   rts
                                              endif
04:0410  204C04            :                  jsr    .UartTx
04:0413  E8                :                  inx
04:0414  80F4              :                 forever

                             ; Output a CR+LF character sequence to move the cursor to the next line.

                                             .longa  off
                             .NewLine:
04:0416  A90D              :                 lda     #CR
04:0418  204C04            :                 jsr     .UartTx
04:041B  A90A              :                 lda     #LF
04:041D  802D              :                 bra     .UartTx

                             ;-------------------------------------------------------------------------------

                             ; Output the high byte of the C register in hex.

                                             .longa  off
                             .HexCHi:
04:041F  A503              :                 lda     <REG_C+1
04:0421  8011              :                 bra     .Hex2

                             ; Output the high byte of the X register in hex.

                                             .longa  off
                             .HexXHi:
04:0423  A505              :                 lda     <REG_X+1
04:0425  800D              :                 bra     .Hex2

                             ; Output the high byte of the Y register in hex.

                                             .longa  off
                             .HexYHi:
04:0427  A507              :                 lda     <REG_Y+1
04:0429  8009              :                 bra     .Hex2

                             ; Output the high byte of the SP register in hex.

                                             .longa  off

Portable 65xx Assembler [19.05]

                             .HexSPHi:
04:042B  A509              :                 lda     <REG_SP+1
04:042D  8005              :                 bra     .Hex2

                             ; Print the value in the C register in hex.

                                             .longa  off
                             .Hex4:
04:042F  EB                :                 xba                             ; Swap the high and low bytes
04:0430  203404            :                 jsr     .Hex2                   ; Print the high byte
04:0433  EB                :                 xba                             ; Swap back then ..

                             ; Print the value in the A registers in hex.

                                             .longa  off
                             .Hex2:
04:0434  48                :                 pha                             ; Save the byte
04:0435  4A                :                 lsr     a                       ; Shift down the high nybble
04:0436  4A                :                 lsr     a
04:0437  4A                :                 lsr     a
04:0438  4A                :                 lsr     a
04:0439  203D04            :                 jsr     .Hex                    ; Print it
04:043C  68                :                 pla                             ; Recover the byte then ..

                             ; Print the value in the low nybble of A in hex.

                                             .longa  off
                             .Hex:
04:043D  204204            :                 jsr     .ToHex
04:0440  800A              :                 bra     .UartTx


                             .ToHex
04:0442  290F              :                 and     #$0f                    ; Strip out the low nybble
04:0444  F8                :                 sed
04:0445  18                :                 clc                             ; And convert using BCD
04:0446  6990              :                 adc     #$90
04:0448  6940              :                 adc     #$40
04:044A  D8                :                 cld
04:044B  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; Transmit the character in A using the UART. Poll the UART to see if its
                             ; busy before outputing the character.

                                             .longa  ?
                             .UartTx:
04:044C  2200F000          :                 jsl     $00f000
04:0450  60                :                 rts

                             ; Output an openning bracket character.

                                             .longa  off

Portable 65xx Assembler [19.05]

                             .OpenBracket:
04:0451  A95B              :                 lda     #'['
04:0453  80F7              :                 bra     .UartTx

                             ; Output a closing bracket character.

                                             .longa  off
                             .CloseBracket:
04:0455  A95D              :                 lda     #']'
04:0457  80F3              :                 bra     .UartTx

                             ; Receive a character from UART performing a polled wait for data to arrive.

                                             .longa  ?
                             .UartRx:
04:0459  2203F000          :                 jsl     >$00f003
04:045D  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; 65xx Flags Bits

04:045E  435A4944584D564E  : .Flag:          .byte   'C','Z','I','D','X','M','V','N'
04:0466  0102040810204080  : .Mask:          .byte   $01,$02,$04,$08,$10,$20,$40,$80

                             ; Various Strings

04:046E  50433D00          : .StrPC:         .byte   "PC=",0
04:0472  20453D00          : .StrE:          .byte   " E=",0
04:0476  20503D00          : .StrP:          .byte   " P=",0
04:047A  20433D00          : .StrC:          .byte   " C=",0
04:047E  20583D00          : .StrX:          .byte   " X=",0
04:0482  20593D00          : .StrY:          .byte   " Y=",0
04:0486  2044503D00        : .StrDP:         .byte   " DP=",0
04:048B  2053503D00        : .StrSP:         .byte   " SP=",0
04:0490  204442523D00      : .StrDBR:        .byte   " DBR=",0

04:0496  0D0A4572726F7220> : .StrError:      .byte   CR,LF,"Error - Type ? for help",0
04:04B0  0D0A496E76616C69> : .StrInvalid:    .byte   CR,LF,"Invalid S28 record",0

                             .StrHelp:
04:04C5  0D0A436F6D6D616E> :                 .byte   CR,LF,"Commands:"
04:04D0  0D0A47205B5B7878> :                 .byte   CR,LF,"G [[xx:]xxxx]            - Execute or RESET"
04:04FD  0D0A4D205B73733A> :                 .byte   CR,LF,"M [ss:]ssss [[ee:]eeee]  - Display memory"
04:0528  0D0A512020202020> :                 .byte   CR,LF,"Q                        - Stop emulator"
04:0552  0D0A522020202020> :                 .byte   CR,LF,"R                        - Show registers"
04:057D  0D0A532E2E2E2020> :                 .byte   CR,LF,"S...                     - Load S28 record"
04:05A9  0D0A57205B73733A> :                 .byte   CR,LF,"W [ss:]ssss bb           - Write memory byte"
04:05D7  00                :                 .byte   0

                             ;-------------------------------------------------------------------------------

                             OPCODES:
04:05D8  16522852          :                 .byte   OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00

Portable 65xx Assembler [19.05]

04:05DC  A0520452          :                 .byte   OP_TSB,OP_ORA,OP_ASL,OP_ORA
04:05E0  6252045E          :                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_PHD
04:05E4  A0520452          :                 .byte   OP_TSB,OP_ORA,OP_ASL,OP_ORA
04:05E8  12525252          :                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
04:05EC  9E520452          :                 .byte   OP_TRB,OP_ORA,OP_ASL,OP_ORA
04:05F0  1E52369A          :                 .byte   OP_CLC,OP_ORA,OP_INC,OP_TCS
04:05F4  9E520452          :                 .byte   OP_TRB,OP_ORA,OP_ASL,OP_ORA
04:05F8  42024002          :                 .byte   OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
04:05FC  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:0600  6E02766C          :                 .byte   OP_PLP,OP_AND,OP_ROL,OP_PLD
04:0604  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:0608  0E020202          :                 .byte   OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
04:060C  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:0610  82022EA2          :                 .byte   OP_SEC,OP_AND,OP_DEC,OP_TSC
04:0614  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:0618  7A34B234          :                 .byte   OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
04:061C  4E344A34          :                 .byte   OP_MVP,OP_EOR,OP_LSR,OP_EOR
04:0620  5A344A60          :                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_PHK
04:0624  3E344A34          :                 .byte   OP_JMP,OP_EOR,OP_LSR,OP_EOR
04:0628  1A343434          :                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
04:062C  4C344A34          :                 .byte   OP_MVN,OP_EOR,OP_LSR,OP_EOR
04:0630  22346698          :                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_TCD
04:0634  3E344A34          :                 .byte   OP_JMP,OP_EOR,OP_LSR,OP_EOR
04:0638  7E005800          :                 .byte   OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
04:063C  92007800          :                 .byte   OP_STZ,OP_ADC,OP_ROR,OP_ADC
04:0640  6800787C          :                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_RTL
04:0644  3E007800          :                 .byte   OP_JMP,OP_ADC,OP_ROR,OP_ADC
04:0648  1C000000          :                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
04:064C  92007800          :                 .byte   OP_STZ,OP_ADC,OP_ROR,OP_ADC
04:0650  8600729C          :                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_TDC
04:0654  3E007800          :                 .byte   OP_JMP,OP_ADC,OP_ROR,OP_ADC
04:0658  148A188A          :                 .byte   OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
04:065C  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:0660  320CA65C          :                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_PHB
04:0664  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:0668  068A8A8A          :                 .byte   OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
04:066C  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:0670  AC8AA8AA          :                 .byte   OP_TYA,OP_STA,OP_TXS,OP_TXY
04:0674  928A928A          :                 .byte   OP_STZ,OP_STA,OP_STZ,OP_STA
04:0678  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
04:067C  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:0680  9644946A          :                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_PLB
04:0684  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:0688  08444444          :                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_LDA     ; B0
04:068C  44484644          :                 .byte   OP_LDA,OP_LDY,OP_LDX,OP_LDA
04:0690  2444A4AE          :                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_TYX
04:0694  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:0698  2C267426          :                 .byte   OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
04:069C  2C262E26          :                 .byte   OP_CPY,OP_CMP,OP_DEC,OP_CMP
04:06A0  3A2630B0          :                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI
04:06A4  2C262E26          :                 .byte   OP_CPY,OP_CMP,OP_DEC,OP_CMP
04:06A8  10262626          :                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
04:06AC  56262E26          :                 .byte   OP_PEI,OP_CMP,OP_DEC,OP_CMP
04:06B0  2026648C          :                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP

Portable 65xx Assembler [19.05]

04:06B4  3C262E26          :                 .byte   OP_JML,OP_CMP,OP_DEC,OP_CMP
04:06B8  2A808880          :                 .byte   OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
04:06BC  2A803680          :                 .byte   OP_CPX,OP_SBC,OP_INC,OP_SBC
04:06C0  388050B4          :                 .byte   OP_INX,OP_SBC,OP_NOP,OP_XBA
04:06C4  2A803680          :                 .byte   OP_CPX,OP_SBC,OP_INC,OP_SBC
04:06C8  0A808080          :                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
04:06CC  54803680          :                 .byte   OP_PEA,OP_SBC,OP_INC,OP_SBC
04:06D0  848070B6          :                 .byte   OP_SED,OP_SBC,OP_PLX,OP_XCE
04:06D4  42803680          :                 .byte   OP_JSR,OP_SBC,OP_INC,OP_SBC

                             MODES:
04:06D8  2E1E2E12          :                 .byte   MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
04:06DC  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:06E0  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:06E4  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:06E8  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
04:06EC  10141422          :                 .byte   MD_DPG,MD_DPX,MD_DPX,MD_DLY
04:06F0  24060224          :                 .byte   MD_IMP,MD_ABY,MD_ACC,MD_IMP
04:06F4  0004040A          :                 .byte   MD_ABS,MD_ABX,MD_ABX,MD_ALX
04:06F8  001E0812          :                 .byte   MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
04:06FC  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:0700  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:0704  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0708  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
04:070C  14141422          :                 .byte   MD_DPX,MD_DPX,MD_DPX,MD_DLY
04:0710  24060224          :                 .byte   MD_IMP,MD_ABY,MD_ACC,MD_IMP
04:0714  0404040A          :                 .byte   MD_ABX,MD_ABX,MD_ABX,MD_ALX
04:0718  241E2E12          :                 .byte   MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
04:071C  2A10101A          :                 .byte   MD_MOV,MD_DPG,MD_DPG,MD_DLI
04:0720  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:0724  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0728  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
04:072C  2A141422          :                 .byte   MD_MOV,MD_DPX,MD_DPX,MD_DLY
04:0730  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0734  0804040A          :                 .byte   MD_ALG,MD_ABX,MD_ABX,MD_ALX
04:0738  241E2412          :                 .byte   MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
04:073C  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:0740  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:0744  0C000008          :                 .byte   MD_AIN,MD_ABS,MD_ABS,MD_ALG
04:0748  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
04:074C  14141422          :                 .byte   MD_DPX,MD_DPX,MD_DPX,MD_DLY
04:0750  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0754  0E04040A          :                 .byte   MD_AIX,MD_ABX,MD_ABX,MD_ALX
04:0758  261E2812          :                 .byte   MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
04:075C  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:0760  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:0764  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0768  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
04:076C  14141622          :                 .byte   MD_DPX,MD_DPX,MD_DPY,MD_DLY
04:0770  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0774  0004040A          :                 .byte   MD_ABS,MD_ABX,MD_ABX,MD_ALX
04:0778  301E3012          :                 .byte   MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
04:077C  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:0780  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP

Portable 65xx Assembler [19.05]

04:0784  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0788  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
04:078C  14141622          :                 .byte   MD_DPX,MD_DPX,MD_DPY,MD_DLY
04:0790  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0794  0404060A          :                 .byte   MD_ABX,MD_ABX,MD_ABY,MD_ALX
04:0798  301E2E12          :                 .byte   MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
04:079C  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:07A0  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:07A4  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:07A8  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
04:07AC  24141422          :                 .byte   MD_IMP,MD_DPX,MD_DPX,MD_DLY
04:07B0  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:07B4  0C04040A          :                 .byte   MD_AIN,MD_ABX,MD_ABX,MD_ALX
04:07B8  301E2E12          :                 .byte   MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
04:07BC  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:07C0  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:07C4  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:07C8  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
04:07CC  24141422          :                 .byte   MD_IMP,MD_DPX,MD_DPX,MD_DLY
04:07D0  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:07D4  0E04040A          :                 .byte   MD_AIX,MD_ABX,MD_ABX,MD_ALX

                             MNEMONICS:
                                             MNEM    'A','D','C'
04:07D8  8304              +                 .word   (('A'-'@')<<10)|(('D'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'A','N','D'
04:07DA  C405              +                 .word   (('A'-'@')<<10)|(('N'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'A','S','L'
04:07DC  6C06              +                 .word   (('A'-'@')<<10)|(('S'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','C','C'
04:07DE  6308              +                 .word   (('B'-'@')<<10)|(('C'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'B','C','S'
04:07E0  7308              +                 .word   (('B'-'@')<<10)|(('C'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'B','E','Q'
04:07E2  B108              +                 .word   (('B'-'@')<<10)|(('E'-'@')<<5)|(('Q'-'@')<<0)
                                             MNEM    'B','I','T'
04:07E4  3409              +                 .word   (('B'-'@')<<10)|(('I'-'@')<<5)|(('T'-'@')<<0)
                                             MNEM    'B','M','I'
04:07E6  A909              +                 .word   (('B'-'@')<<10)|(('M'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'B','N','E'
04:07E8  C509              +                 .word   (('B'-'@')<<10)|(('N'-'@')<<5)|(('E'-'@')<<0)
                                             MNEM    'B','P','L'
04:07EA  0C0A              +                 .word   (('B'-'@')<<10)|(('P'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','R','A'
04:07EC  410A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'B','R','K'
04:07EE  4B0A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('K'-'@')<<0)
                                             MNEM    'B','R','L'
04:07F0  4C0A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','V','C'
04:07F2  C30A              +                 .word   (('B'-'@')<<10)|(('V'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'B','V','S'
04:07F4  D30A              +                 .word   (('B'-'@')<<10)|(('V'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'C','L','C'

Portable 65xx Assembler [19.05]

04:07F6  830D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'C','L','D'
04:07F8  840D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'C','L','I'
04:07FA  890D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'C','L','V'
04:07FC  960D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('V'-'@')<<0)
                                             MNEM    'C','M','P'
04:07FE  B00D              +                 .word   (('C'-'@')<<10)|(('M'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'C','O','P'
04:0800  F00D              +                 .word   (('C'-'@')<<10)|(('O'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'C','P','X'
04:0802  180E              +                 .word   (('C'-'@')<<10)|(('P'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'C','P','Y'
04:0804  190E              +                 .word   (('C'-'@')<<10)|(('P'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'D','E','C'
04:0806  A310              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'D','E','X'
04:0808  B810              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'D','E','Y'
04:080A  B910              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'E','O','R'
04:080C  F215              +                 .word   (('E'-'@')<<10)|(('O'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'I','N','C'
04:080E  C325              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'I','N','X'
04:0810  D825              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'I','N','Y'
04:0812  D925              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'J','M','L'
04:0814  AC29              +                 .word   (('J'-'@')<<10)|(('M'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'J','M','P'
04:0816  B029              +                 .word   (('J'-'@')<<10)|(('M'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'J','S','L'
04:0818  6C2A              +                 .word   (('J'-'@')<<10)|(('S'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'J','S','R'
04:081A  722A              +                 .word   (('J'-'@')<<10)|(('S'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'L','D','A'
04:081C  8130              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'L','D','X'
04:081E  9830              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'L','D','Y'
04:0820  9930              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'L','S','R'
04:0822  7232              +                 .word   (('L'-'@')<<10)|(('S'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'M','V','N'
04:0824  CE36              +                 .word   (('M'-'@')<<10)|(('V'-'@')<<5)|(('N'-'@')<<0)
                                             MNEM    'M','V','P'
04:0826  D036              +                 .word   (('M'-'@')<<10)|(('V'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'N','O','P'
04:0828  F039              +                 .word   (('N'-'@')<<10)|(('O'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'O','R','A'
04:082A  413E              +                 .word   (('O'-'@')<<10)|(('R'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','E','A'

Portable 65xx Assembler [19.05]

04:082C  A140              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','E','I'
04:082E  A940              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'P','E','R'
04:0830  B240              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'P','H','A'
04:0832  0141              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','H','B'
04:0834  0241              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'P','H','D'
04:0836  0441              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'P','H','K'
04:0838  0B41              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('K'-'@')<<0)
                                             MNEM    'P','H','P'
04:083A  1041              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'P','H','X'
04:083C  1841              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'P','H','Y'
04:083E  1941              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'P','L','A'
04:0840  8141              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','L','B'
04:0842  8241              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'P','L','D'
04:0844  8441              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'P','L','P'
04:0846  9041              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'P','L','X'
04:0848  9841              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'P','L','Y'
04:084A  9941              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'R','E','P'
04:084C  B048              +                 .word   (('R'-'@')<<10)|(('E'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'R','O','L'
04:084E  EC49              +                 .word   (('R'-'@')<<10)|(('O'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'R','O','R'
04:0850  F249              +                 .word   (('R'-'@')<<10)|(('O'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'R','T','I'
04:0852  894A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'R','T','L'
04:0854  8C4A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'R','T','S'
04:0856  934A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'S','B','C'
04:0858  434C              +                 .word   (('S'-'@')<<10)|(('B'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'S','E','C'
04:085A  A34C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'S','E','D'
04:085C  A44C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'S','E','I'
04:085E  A94C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'S','E','P'
04:0860  B04C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'S','T','A'

Portable 65xx Assembler [19.05]

04:0862  814E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'S','T','P'
04:0864  904E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'S','T','X'
04:0866  984E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'S','T','Y'
04:0868  994E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'S','T','Z'
04:086A  9A4E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('Z'-'@')<<0)
                                             MNEM    'T','A','X'
04:086C  3850              +                 .word   (('T'-'@')<<10)|(('A'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'T','A','Y'
04:086E  3950              +                 .word   (('T'-'@')<<10)|(('A'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'T','C','D'
04:0870  6450              +                 .word   (('T'-'@')<<10)|(('C'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'T','C','S'
04:0872  7350              +                 .word   (('T'-'@')<<10)|(('C'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'T','D','C'
04:0874  8350              +                 .word   (('T'-'@')<<10)|(('D'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'T','R','B'
04:0876  4252              +                 .word   (('T'-'@')<<10)|(('R'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'T','S','B'
04:0878  6252              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'T','S','C'
04:087A  6352              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'T','S','X'
04:087C  7852              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'T','X','A'
04:087E  0153              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'T','X','S'
04:0880  1353              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'T','X','Y'
04:0882  1953              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'T','Y','A'
04:0884  2153              +                 .word   (('T'-'@')<<10)|(('Y'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'T','Y','X'
04:0886  3853              +                 .word   (('T'-'@')<<10)|(('Y'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'W','A','I'
04:0888  295C              +                 .word   (('W'-'@')<<10)|(('A'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'W','D','M'
04:088A  8D5C              +                 .word   (('W'-'@')<<10)|(('D'-'@')<<5)|(('M'-'@')<<0)
                                             MNEM    'X','B','A'
04:088C  4160              +                 .word   (('X'-'@')<<10)|(('B'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'X','C','E'
04:088E  6560              +                 .word   (('X'-'@')<<10)|(('C'-'@')<<5)|(('E'-'@')<<0)

                                             .end


Portable 65xx Assembler [19.05]

Symbol Table

ADDR_E                           0000EE18  | MD_ABS                           00000000
ADDR_S                           0000EE15  | OP_ADC                           00000000
BEL                              00000007  | WDM_IER_RD                       00000000
BOOT_MESSAGE                     0000F034  | __6501__                         00000000
BRKN                             0000F0C2  | __6502__                         00000000
BS                               00000008  | __65832__                        00000000
BYTES_PER_LINE                   00000064  | __65C02__                        00000000
B_FLAG                           00000010  | __65SC02__                       00000000
CMD_BUF                          0000EE80  | C_FLAG                           00000001
CMD_LEN                          0000EE10  | INT_CLK                          00000001
COPE                             0000F006  | WDM_IER_WR                       00000001
COPN                             0000F007  | __65816__                        00000001
CR                               0000000D  | INT_U1RX                         00000002
C_FLAG                           00000001  | MD_ACC                           00000002
DEFAULT                          0000EE11  | OP_AND                           00000002
DEL                              0000007F  | WDM_IER_SET                      00000002
D_FLAG                           00000008  | Z_FLAG                           00000002
INT_CLK                          00000001  | WDM_IER_CLR                      00000003
INT_U1RX                         00000002  | INT_U1TX                         00000004
INT_U1TX                         00000004  | I_FLAG                           00000004
IO_PAGE                          0000EF00  | MD_ABX                           00000004
IRQBRK                           0000F0BA  | OP_ASL                           00000004
IRQHandler                       0000F0DF  | WDM_IFR_RD                       00000004
IRQN                             0000F0D1  | WDM_IFR_WR                       00000005
I_FLAG                           00000004  | MD_ABY                           00000006
LF                               0000000A  | OP_BCC                           00000006
MD_ABS                           00000000  | WDM_IFR_SET                      00000006
MD_ABX                           00000004  | BEL                              00000007
MD_ABY                           00000006  | WDM_IFR_CLR                      00000007
MD_ACC                           00000002  | BS                               00000008
MD_AIN                           0000000C  | D_FLAG                           00000008
MD_AIX                           0000000E  | MD_ALG                           00000008
MD_ALG                           00000008  | OP_BCS                           00000008
MD_ALX                           0000000A  | PIXELS_PER_BYTE                  00000008
MD_DIN                           00000018  | WDM_IFLAGS                       00000008
MD_DIX                           0000001E  | LF                               0000000A
MD_DIY                           00000020  | MD_ALX                           0000000A
MD_DLI                           0000001A  | OP_BEQ                           0000000A
MD_DLY                           00000022  | MD_AIN                           0000000C
MD_DPG                           00000010  | OP_BIT                           0000000C
MD_DPX                           00000014  | CR                               0000000D
MD_DPY                           00000016  | MD_AIX                           0000000E
MD_IMM                           0000002C  | OP_BMI                           0000000E
MD_IMP                           00000024  | B_FLAG                           00000010
MD_IMX                           00000030  | MD_DPG                           00000010
MD_INT                           0000002E  | OP_BNE                           00000010
MD_MOV                           0000002A  | WDM_U1TX                         00000010
MD_REL                           00000026  | X_FLAG                           00000010
MD_RLG                           00000028  | WDM_U1RX                         00000011
MD_SKY                           0000001C  | MD_STK                           00000012
MD_STK                           00000012  | OP_BPL                           00000012
MNEMONICS                        000407D8  | MD_DPX                           00000014

Portable 65xx Assembler [19.05]

MODES                            000406D8  | OP_BRA                           00000014
MON_PAGE                         0000EE00  | MD_DPY                           00000016
M_FLAG                           00000020  | OP_BRK                           00000016
Monitor                          00040000  | MD_DIN                           00000018
Monitor.AddChar                  00040406  | OP_BRL                           00000018
Monitor.AddHex                   00040403  | MD_DLI                           0000001A
Monitor.AddHex2                  000403FA  | OP_BVC                           0000001A
Monitor.AddHexDigit              00040343  | MD_SKY                           0000001C
Monitor.BackSpace                00040163  | OP_BVS                           0000001C
Monitor.Beep                     00040178  | MD_DIX                           0000001E
Monitor.BuildCommand             000403D0  | OP_CLC                           0000001E
Monitor.BumpAddress              00040396  | MD_DIY                           00000020
Monitor.CloseBracket             00040455  | M_FLAG                           00000020
Monitor.CompareAddr              000403A8  | OP_CLD                           00000020
Monitor.CopyToEnd                00040389  | MD_DLY                           00000022
Monitor.CopyToStart              0004037C  | OP_CLI                           00000022
Monitor.Flag                     0004045E  | MD_IMP                           00000024
Monitor.FoundBank                00040301  | OP_CLV                           00000024
Monitor.GetByte                  00040328  | MD_REL                           00000026
Monitor.GetValue                 000402DD  | OP_CMP                           00000026
Monitor.Hex                      0004043D  | MD_RLG                           00000028
Monitor.Hex2                     00040434  | OP_COP                           00000028
Monitor.Hex4                     0004042F  | MD_MOV                           0000002A
Monitor.HexCHi                   0004041F  | OP_CPX                           0000002A
Monitor.HexDigit                 00040363  | MD_IMM                           0000002C
Monitor.HexSPHi                  0004042B  | OP_CPY                           0000002C
Monitor.HexXHi                   00040423  | MD_INT                           0000002E
Monitor.HexYHi                   00040427  | OP_DEC                           0000002E
Monitor.InvalidRecord            000402A6  | MD_IMX                           00000030
Monitor.Mask                     00040466  | OP_DEX                           00000030
Monitor.NewCommand               00040134  | OP_DEY                           00000032
Monitor.NewLine                  00040416  | OP_EOR                           00000034
Monitor.NextChar                 000403BE  | OP_INC                           00000036
Monitor.OldCommand               00040136  | OP_INX                           00000038
Monitor.OpenBracket              00040451  | OP_INY                           0000003A
Monitor.Print                    0004040A  | OP_JML                           0000003C
Monitor.ReturnValue              00040326  | OP_JMP                           0000003E
Monitor.ShortA                   000400A1  | OP_JSL                           00000040
Monitor.ShortX                   000400C7  | UART_BUFSIZ                      00000040
Monitor.ShortY                   000400ED  | V_FLAG                           00000040
Monitor.ShowError                000402D4  | OP_JSR                           00000042
Monitor.ShowRegisters            00040041  | OP_LDA                           00000044
Monitor.SkipSpaces               000403B6  | OP_LDX                           00000046
Monitor.StrC                     0004047A  | OP_LDY                           00000048
Monitor.StrDBR                   00040490  | OP_LSR                           0000004A
Monitor.StrDP                    00040486  | OP_MVN                           0000004C
Monitor.StrE                     00040472  | OP_MVP                           0000004E
Monitor.StrError                 00040496  | OP_NOP                           00000050
Monitor.StrHelp                  000404C5  | OP_ORA                           00000052
Monitor.StrInvalid               000404B0  | OP_PEA                           00000054
Monitor.StrP                     00040476  | OP_PEI                           00000056
Monitor.StrPC                    0004046E  | OP_PER                           00000058
Monitor.StrSP                    0004048B  | OP_PHA                           0000005A
Monitor.StrX                     0004047E  | OP_PHB                           0000005C

Portable 65xx Assembler [19.05]

Monitor.StrY                     00040482  | OP_PHD                           0000005E
Monitor.ToHex                    00040442  | OP_PHK                           00000060
Monitor.ToUpper                  000403C5  | OP_PHP                           00000062
Monitor.UartRx                   00040459  | BYTES_PER_LINE                   00000064
Monitor.UartTx                   0004044C  | OP_PHX                           00000064
N_FLAG                           00000080  | OP_PHY                           00000066
OPCODES                          000405D8  | OP_PLA                           00000068
OP_ADC                           00000000  | OP_PLB                           0000006A
OP_AND                           00000002  | OP_PLD                           0000006C
OP_ASL                           00000004  | OP_PLP                           0000006E
OP_BCC                           00000006  | OP_PLX                           00000070
OP_BCS                           00000008  | OP_PLY                           00000072
OP_BEQ                           0000000A  | OP_REP                           00000074
OP_BIT                           0000000C  | OP_ROL                           00000076
OP_BMI                           0000000E  | OP_ROR                           00000078
OP_BNE                           00000010  | OP_RTI                           0000007A
OP_BPL                           00000012  | OP_RTL                           0000007C
OP_BRA                           00000014  | OP_RTS                           0000007E
OP_BRK                           00000016  | DEL                              0000007F
OP_BRL                           00000018  | N_FLAG                           00000080
OP_BVC                           0000001A  | OP_SBC                           00000080
OP_BVS                           0000001C  | OP_SEC                           00000082
OP_CLC                           0000001E  | OP_SED                           00000084
OP_CLD                           00000020  | OP_SEI                           00000086
OP_CLI                           00000022  | OP_SEP                           00000088
OP_CLV                           00000024  | OP_STA                           0000008A
OP_CMP                           00000026  | OP_STP                           0000008C
OP_COP                           00000028  | OP_STX                           0000008E
OP_CPX                           0000002A  | OP_STY                           00000090
OP_CPY                           0000002C  | OP_STZ                           00000092
OP_DEC                           0000002E  | OP_TAX                           00000094
OP_DEX                           00000030  | OP_TAY                           00000096
OP_DEY                           00000032  | OP_TCD                           00000098
OP_EOR                           00000034  | OP_TCS                           0000009A
OP_INC                           00000036  | OP_TDC                           0000009C
OP_INX                           00000038  | OP_TRB                           0000009E
OP_INY                           0000003A  | OP_TSB                           000000A0
OP_JML                           0000003C  | OP_TSC                           000000A2
OP_JMP                           0000003E  | OP_TSX                           000000A4
OP_JSL                           00000040  | OP_TXA                           000000A6
OP_JSR                           00000042  | OP_TXS                           000000A8
OP_LDA                           00000044  | OP_TXY                           000000AA
OP_LDX                           00000046  | OP_TYA                           000000AC
OP_LDY                           00000048  | OP_TYX                           000000AE
OP_LSR                           0000004A  | OP_WAI                           000000B0
OP_MVN                           0000004C  | OP_WDM                           000000B2
OP_MVP                           0000004E  | OP_XBA                           000000B4
OP_NOP                           00000050  | OP_XCE                           000000B6
OP_ORA                           00000052  | SVGA_HEIGHT                      00000258
OP_PEA                           00000054  | SVGA_WIDTH                       00000320
OP_PEI                           00000056  | MON_PAGE                         0000EE00
OP_PER                           00000058  | REG_E                            0000EE00
OP_PHA                           0000005A  | REG_P                            0000EE01
OP_PHB                           0000005C  | REG_C                            0000EE02

Portable 65xx Assembler [19.05]

OP_PHD                           0000005E  | REG_X                            0000EE04
OP_PHK                           00000060  | REG_Y                            0000EE06
OP_PHP                           00000062  | REG_SP                           0000EE08
OP_PHX                           00000064  | REG_DP                           0000EE0A
OP_PHY                           00000066  | REG_PC                           0000EE0C
OP_PLA                           00000068  | REG_PBR                          0000EE0E
OP_PLB                           0000006A  | REG_DBR                          0000EE0F
OP_PLD                           0000006C  | CMD_LEN                          0000EE10
OP_PLP                           0000006E  | DEFAULT                          0000EE11
OP_PLX                           00000070  | VALUE                            0000EE12
OP_PLY                           00000072  | ADDR_S                           0000EE15
OP_REP                           00000074  | ADDR_E                           0000EE18
OP_ROL                           00000076  | CMD_BUF                          0000EE80
OP_ROR                           00000078  | IO_PAGE                          0000EF00
OP_RTI                           0000007A  | TX_HEAD                          0000EF00
OP_RTL                           0000007C  | TX_TAIL                          0000EF01
OP_RTS                           0000007E  | RX_HEAD                          0000EF02
OP_SBC                           00000080  | RX_TAIL                          0000EF03
OP_SEC                           00000082  | TICK                             0000EF04
OP_SED                           00000084  | TX_DATA                          0000EF08
OP_SEI                           00000086  | RX_DATA                          0000EF48
OP_SEP                           00000088  | COPE                             0000F006
OP_STA                           0000008A  | COPN                             0000F007
OP_STP                           0000008C  | RESET                            0000F008
OP_STX                           0000008E  | BOOT_MESSAGE                     0000F034
OP_STY                           00000090  | Uart1Tx                          0000F06C
OP_STZ                           00000092  | Uart1Rx                          0000F09A
OP_TAX                           00000094  | IRQBRK                           0000F0BA
OP_TAY                           00000096  | BRKN                             0000F0C2
OP_TCD                           00000098  | IRQN                             0000F0D1
OP_TCS                           0000009A  | IRQHandler                       0000F0DF
OP_TDC                           0000009C  | UnusedVector                     0000F138
OP_TRB                           0000009E  | VLINES                           00010000
OP_TSB                           000000A0  | VDATA                            000104B0
OP_TSC                           000000A2  | VEND                             0001EF10
OP_TSX                           000000A4  | Monitor                          00040000
OP_TXA                           000000A6  | Monitor.ShowRegisters            00040041
OP_TXS                           000000A8  | Monitor.ShortA                   000400A1
OP_TXY                           000000AA  | Monitor.ShortX                   000400C7
OP_TYA                           000000AC  | Monitor.ShortY                   000400ED
OP_TYX                           000000AE  | Monitor.NewCommand               00040134
OP_WAI                           000000B0  | Monitor.OldCommand               00040136
OP_WDM                           000000B2  | Monitor.BackSpace                00040163
OP_XBA                           000000B4  | Monitor.Beep                     00040178
OP_XCE                           000000B6  | Monitor.InvalidRecord            000402A6
PIXELS_PER_BYTE                  00000008  | Monitor.ShowError                000402D4
REG_C                            0000EE02  | Monitor.GetValue                 000402DD
REG_DBR                          0000EE0F  | Monitor.FoundBank                00040301
REG_DP                           0000EE0A  | Monitor.ReturnValue              00040326
REG_E                            0000EE00  | Monitor.GetByte                  00040328
REG_P                            0000EE01  | Monitor.AddHexDigit              00040343
REG_PBR                          0000EE0E  | Monitor.HexDigit                 00040363
REG_PC                           0000EE0C  | Monitor.CopyToStart              0004037C
REG_SP                           0000EE08  | Monitor.CopyToEnd                00040389

Portable 65xx Assembler [19.05]

REG_X                            0000EE04  | Monitor.BumpAddress              00040396
REG_Y                            0000EE06  | Monitor.CompareAddr              000403A8
RESET                            0000F008  | Monitor.SkipSpaces               000403B6
RX_DATA                          0000EF48  | Monitor.NextChar                 000403BE
RX_HEAD                          0000EF02  | Monitor.ToUpper                  000403C5
RX_TAIL                          0000EF03  | Monitor.BuildCommand             000403D0
SVGA_HEIGHT                      00000258  | Monitor.AddHex2                  000403FA
SVGA_WIDTH                       00000320  | Monitor.AddHex                   00040403
TICK                             0000EF04  | Monitor.AddChar                  00040406
TX_DATA                          0000EF08  | Monitor.Print                    0004040A
TX_HEAD                          0000EF00  | Monitor.NewLine                  00040416
TX_TAIL                          0000EF01  | Monitor.HexCHi                   0004041F
UART_BUFSIZ                      00000040  | Monitor.HexXHi                   00040423
Uart1Rx                          0000F09A  | Monitor.HexYHi                   00040427
Uart1Tx                          0000F06C  | Monitor.HexSPHi                  0004042B
UnusedVector                     0000F138  | Monitor.Hex4                     0004042F
VALUE                            0000EE12  | Monitor.Hex2                     00040434
VDATA                            000104B0  | Monitor.Hex                      0004043D
VEND                             0001EF10  | Monitor.ToHex                    00040442
VLINES                           00010000  | Monitor.UartTx                   0004044C
V_FLAG                           00000040  | Monitor.OpenBracket              00040451
WDM_IER_CLR                      00000003  | Monitor.CloseBracket             00040455
WDM_IER_RD                       00000000  | Monitor.UartRx                   00040459
WDM_IER_SET                      00000002  | Monitor.Flag                     0004045E
WDM_IER_WR                       00000001  | Monitor.Mask                     00040466
WDM_IFLAGS                       00000008  | Monitor.StrPC                    0004046E
WDM_IFR_CLR                      00000007  | Monitor.StrE                     00040472
WDM_IFR_RD                       00000004  | Monitor.StrP                     00040476
WDM_IFR_SET                      00000006  | Monitor.StrC                     0004047A
WDM_IFR_WR                       00000005  | Monitor.StrX                     0004047E
WDM_U1RX                         00000011  | Monitor.StrY                     00040482
WDM_U1TX                         00000010  | Monitor.StrDP                    00040486
X_FLAG                           00000010  | Monitor.StrSP                    0004048B
Z_FLAG                           00000002  | Monitor.StrDBR                   00040490
__6501__                         00000000  | Monitor.StrError                 00040496
__6502__                         00000000  | Monitor.StrInvalid               000404B0
__65816__                        00000001  | Monitor.StrHelp                  000404C5
__65832__                        00000000  | OPCODES                          000405D8
__65C02__                        00000000  | MODES                            000406D8
__65SC02__                       00000000  | MNEMONICS                        000407D8
