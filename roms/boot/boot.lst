
Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ;  _____ __  __        __  ____   ____ ___  _  __
                             ; | ____|  \/  |      / /_| ___| / ___( _ )/ |/ /_
                             ; |  _| | |\/| |_____| '_ \___ \| |   / _ \| | '_ \
                             ; | |___| |  | |_____| (_) |__) | |__| (_) | | (_) |
                             ; |_____|_|__|_|___ __\___/____/ \____\___/|_|\___/
                             ; | ____/ ___||  _ \___ /___ \
                             ; |  _| \___ \| |_) ||_ \ __) |
                             ; | |___ ___) |  __/___) / __/
                             ; |_____|____/|_|  |____/_____|
                             ;
                             ; Boot ROM, Monitor & Operating System
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C),2019 Andrew John Jacobs
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; This source file builds both the boot ($00:f000-ffff) and rom0 ($04:0000-ffff)
                             ; images.
                             ;
                             ; The following table describes the memory map of the target system.
                             ;
                             ; +---------+----+-------------------------------
                             ; | 00:0000 | RW | OS Variables & Stack
                             ; +---------+----+-------------------------------
                             ; | 00:1000 | RW | Task Zero Pages & Stack
                             ; |---------+----+-------------------------------
                             ; | 00:2000 | RW | Other tasks areas
                             ; |         |    |
                             ; |         |    |
                             ; +---------+----+-------------------------------
                             ; | 00:ee00 | RW | Monitor Workspace - Can be overwritten
                             ; +---------+----+-------------------------------
                             ; | 00:ef00 | RW | I/O Workspace (Timer & UART Buffers)
                             ; +---------+----+-------------------------------
                             ; | 00:f000 | RO | OS Boot ROM & Interrupt Handlers
                             ; | 00:ffe0 |    | Native Mode Vectors
                             ; | 00:fff0 |    | Emulation Mode Vectors
                             ; +---------+----+-------------------------------
                             ; | 01:0000 | RW | Video
                             ; +---------+----+-------------------------------
                             ; | 02:0000 | RW | SRAM
                             ; | 03:0000 |    |
                             ; +---------+----+-------------------------------
                             ; | 04:0000 | RO | OS Code + Monitor
                             ; | 05:0000 |    | ROM1 (Spare)

Portable 65xx Assembler [19.05]

                             ; | 06:0000 |    | ROM2 (Spare)
                             ; | 07:0000 |    | ROM3 (Spare)
                             ; +---------+----+-------------------------------
                             ;
                             ;
                             ;-------------------------------------------------------------------------------

                                             .65816

                                             .include "../w65c816.inc"
                             ;==============================================================================
                             ; __        ____  ____   ____ ___  _  __
                             ; \ \      / / /_| ___| / ___( _ )/ |/ /_
                             ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \
                             ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
                             ;    \_/\_/  \___/____/ \____\___/|_|\___/
                             ;
                             ; Western Design Center W65C816 device definitions
                             ;------------------------------------------------------------------------------
                             ; Copyright (C)2015-2019 HandCoded Software Ltd.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; Various macros and definitions for the W65C816 microprocessor.
                             ;
                             ;===============================================================================
                             ; Revision History:
                             ;
                             ; 2015-12-18 AJ Initial version
                             ;-------------------------------------------------------------------------------

                             ;==============================================================================
                             ; Status Register Bits
                             ;------------------------------------------------------------------------------

         00000080          = N_FLAG          .equ    1<<7
         00000040          = V_FLAG          .equ    1<<6
         00000020          = M_FLAG          .equ    1<<5
         00000010          = X_FLAG          .equ    1<<4
         00000010          = B_FLAG          .equ    1<<4
         00000008          = D_FLAG          .equ    1<<3
         00000004          = I_FLAG          .equ    1<<2
         00000002          = Z_FLAG          .equ    1<<1
         00000001          = C_FLAG          .equ    1<<0

                             ;==============================================================================

Portable 65xx Assembler [19.05]

                             ; Macros
                             ;------------------------------------------------------------------------------

                             ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
                             ; is fixed at $0100-$01ff.

                             emulate         .macro
                                             sec
                                             xce
                                             .endm

                             ; Puts the processor in native mode. The size of the memory and index register
                             ; operations is not controlled by the M & X bits in the status register.

                             native          .macro
                                             clc
                                             xce
                                             .endm

                             ; Resets the M bit making the accumulator and memory accesses 16-bits wide.

                             long_a          .macro
                                             rep     #M_FLAG
                                             .longa  on
                                             .endm

                             ; Resets the X bit making the index registers 16-bits wide

                             long_i          .macro
                                             rep     #X_FLAG
                                             .longi  on
                                             .endm

                             ; Resets the M and X bits making the accumulator, memory accesses and index
                             ; registers 16-bits wide.

                             long_ai         .macro
                                             rep     #M_FLAG|X_FLAG
                                             .longa  on
                                             .longi  on
                                             .endm

                             ; Sets the M bit making the accumulator and memory accesses 8-bits wide.

                             short_a         .macro
                                             sep     #M_FLAG
                                             .longa  off
                                             .endm

                             ; Sets the X bit making the index registers 8-bits wide.

                             short_i         .macro
                                             sep     #X_FLAG
                                             .longi  off

Portable 65xx Assembler [19.05]

                                             .endm

                             ; Sets the M & X bits making the accumulator, memory accesses and index
                             ; registers 8-bits wide.

                             short_ai        .macro
                                             sep     #M_FLAG|X_FLAG
                                             .longa  off
                                             .longi  off
                                             .endm
                                             .include "../signature.inc"
                             ;===============================================================================
                             ;  _____ __  __        __  ____   ____ ___  _  __
                             ; | ____|  \/  |      / /_| ___| / ___( _ )/ |/ /_
                             ; |  _| | |\/| |_____| '_ \___ \| |   / _ \| | '_ \
                             ; | |___| |  | |_____| (_) |__) | |__| (_) | | (_) |
                             ; |_____|_|__|_|___ __\___/____/ \____\___/|_|\___/
                             ; | ____/ ___||  _ \___ /___ \
                             ; |  _| \___ \| |_) ||_ \ __) |
                             ; | |___ ___) |  __/___) / __/
                             ; |_____|____/|_|  |____/_____|
                             ;
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2018-2019 Andrew John Jacobs
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;===============================================================================
                             ;
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; WDM Signature Bytes
                             ;-------------------------------------------------------------------------------

         00000000          = WDM_IER_RD      .equ    $00
         00000001          = WDM_IER_WR      .equ    $01
         00000002          = WDM_IER_SET     .equ    $02
         00000003          = WDM_IER_CLR     .equ    $03

         00000004          = WDM_IFR_RD      .equ    $04
         00000005          = WDM_IFR_WR      .equ    $05
         00000006          = WDM_IFR_SET     .equ    $06
         00000007          = WDM_IFR_CLR     .equ    $07

         00000008          = WDM_IFLAGS      .equ    $08

         00000010          = WDM_U1TX        .equ    $10

Portable 65xx Assembler [19.05]

         00000011          = WDM_U1RX        .equ    $11

                             ;===============================================================================
                             ; IER/IFR Bits
                             ;-------------------------------------------------------------------------------

         00000001          = INT_CLK         .equ    $0001
         00000002          = INT_U1RX        .equ    $0002
         00000004          = INT_U1TX        .equ    $0004

                             ;===============================================================================
                             ; Macros
                             ;-------------------------------------------------------------------------------

                             MNEM            .macro
                                             .word   ((\0-'@')<<10)|((\1-'@')<<5)|((\2-'@')<<0)
                                             .endm

                             ;===============================================================================
                             ; Constants
                             ;-------------------------------------------------------------------------------

                             ; ASCII Control characters

         00000007          = BEL             .equ    $07
         00000008          = BS              .equ    $08
         0000000A          = LF              .equ    $0a
         0000000D          = CR              .equ    $0d
         0000007F          = DEL             .equ    $7f

                             ;-------------------------------------------------------------------------------

         0000EE00          = MON_PAGE        .equ    $ee00                   ; Monitors private data page
         0000EF00          = IO_PAGE         .equ    $ef00                   ; I/O private data page

         00000040          = UART_BUFSIZ     .equ    64                      ; UART buffer size

                             ;===============================================================================
                             ; Opcodes & Addressing Modes
                             ;-------------------------------------------------------------------------------

         00000000          = OP_ADC          .equ    0<<1
         00000002          = OP_AND          .equ    1<<1
         00000004          = OP_ASL          .equ    2<<1
         00000006          = OP_BCC          .equ    3<<1
         00000008          = OP_BCS          .equ    4<<1
         0000000A          = OP_BEQ          .equ    5<<1
         0000000C          = OP_BIT          .equ    6<<1
         0000000E          = OP_BMI          .equ    7<<1
         00000010          = OP_BNE          .equ    8<<1
         00000012          = OP_BPL          .equ    9<<1
         00000014          = OP_BRA          .equ    10<<1
         00000016          = OP_BRK          .equ    11<<1
         00000018          = OP_BRL          .equ    12<<1

Portable 65xx Assembler [19.05]

         0000001A          = OP_BVC          .equ    13<<1
         0000001C          = OP_BVS          .equ    14<<1
         0000001E          = OP_CLC          .equ    15<<1
         00000020          = OP_CLD          .equ    16<<1
         00000022          = OP_CLI          .equ    17<<1
         00000024          = OP_CLV          .equ    18<<1
         00000026          = OP_CMP          .equ    19<<1
         00000028          = OP_COP          .equ    20<<1
         0000002A          = OP_CPX          .equ    21<<1
         0000002C          = OP_CPY          .equ    22<<1
         0000002E          = OP_DEC          .equ    23<<1
         00000030          = OP_DEX          .equ    24<<1
         00000032          = OP_DEY          .equ    25<<1
         00000034          = OP_EOR          .equ    26<<1
         00000036          = OP_INC          .equ    27<<1
         00000038          = OP_INX          .equ    28<<1
         0000003A          = OP_INY          .equ    29<<1
         0000003C          = OP_JML          .equ    30<<1
         0000003E          = OP_JMP          .equ    31<<1
         00000040          = OP_JSL          .equ    32<<1
         00000042          = OP_JSR          .equ    33<<1
         00000044          = OP_LDA          .equ    34<<1
         00000046          = OP_LDX          .equ    35<<1
         00000048          = OP_LDY          .equ    36<<1
         0000004A          = OP_LSR          .equ    37<<1
         0000004C          = OP_MVN          .equ    38<<1
         0000004E          = OP_MVP          .equ    39<<1
         00000050          = OP_NOP          .equ    40<<1
         00000052          = OP_ORA          .equ    41<<1
         00000054          = OP_PEA          .equ    42<<1
         00000056          = OP_PEI          .equ    43<<1
         00000058          = OP_PER          .equ    44<<1
         0000005A          = OP_PHA          .equ    45<<1
         0000005C          = OP_PHB          .equ    46<<1
         0000005E          = OP_PHD          .equ    47<<1
         00000060          = OP_PHK          .equ    48<<1
         00000062          = OP_PHP          .equ    49<<1
         00000064          = OP_PHX          .equ    50<<1
         00000066          = OP_PHY          .equ    51<<1
         00000068          = OP_PLA          .equ    52<<1
         0000006A          = OP_PLB          .equ    53<<1
         0000006C          = OP_PLD          .equ    54<<1
         0000006E          = OP_PLP          .equ    55<<1
         00000070          = OP_PLX          .equ    56<<1
         00000072          = OP_PLY          .equ    57<<1
         00000074          = OP_REP          .equ    58<<1
         00000076          = OP_ROL          .equ    59<<1
         00000078          = OP_ROR          .equ    60<<1
         0000007A          = OP_RTI          .equ    61<<1
         0000007C          = OP_RTL          .equ    62<<1
         0000007E          = OP_RTS          .equ    63<<1
         00000080          = OP_SBC          .equ    64<<1
         00000082          = OP_SEC          .equ    65<<1
         00000084          = OP_SED          .equ    66<<1

Portable 65xx Assembler [19.05]

         00000086          = OP_SEI          .equ    67<<1
         00000088          = OP_SEP          .equ    68<<1
         0000008A          = OP_STA          .equ    69<<1
         0000008C          = OP_STP          .equ    70<<1
         0000008E          = OP_STX          .equ    71<<1
         00000090          = OP_STY          .equ    72<<1
         00000092          = OP_STZ          .equ    73<<1
         00000094          = OP_TAX          .equ    74<<1
         00000096          = OP_TAY          .equ    75<<1
         00000098          = OP_TCD          .equ    76<<1
         0000009A          = OP_TCS          .equ    77<<1
         0000009C          = OP_TDC          .equ    78<<1
         0000009E          = OP_TRB          .equ    79<<1
         000000A0          = OP_TSB          .equ    80<<1
         000000A2          = OP_TSC          .equ    81<<1
         000000A4          = OP_TSX          .equ    82<<1
         000000A6          = OP_TXA          .equ    83<<1
         000000A8          = OP_TXS          .equ    84<<1
         000000AA          = OP_TXY          .equ    85<<1
         000000AC          = OP_TYA          .equ    86<<1
         000000AE          = OP_TYX          .equ    87<<1
         000000B0          = OP_WAI          .equ    88<<1
         000000B2          = OP_WDM          .equ    89<<1
         000000B4          = OP_XBA          .equ    90<<1
         000000B6          = OP_XCE          .equ    91<<1

         00000000          = MD_ABS          .equ    0<<1                    ; a
         00000002          = MD_ACC          .equ    1<<1                    ; A
         00000004          = MD_ABX          .equ    2<<1                    ; a,x
         00000006          = MD_ABY          .equ    3<<1                    ; a,y
         00000008          = MD_ALG          .equ    4<<1                    ; al
         0000000A          = MD_ALX          .equ    5<<1                    ; al,x
         0000000C          = MD_AIN          .equ    6<<1                    ; (a)
         0000000E          = MD_AIX          .equ    7<<1                    ; (a,x)
         00000010          = MD_DPG          .equ    8<<1                    ; d
         00000012          = MD_STK          .equ    9<<1                    ; d,s
         00000014          = MD_DPX          .equ    10<<1                   ; d,x
         00000016          = MD_DPY          .equ    11<<1                   ; d,x
         00000018          = MD_DIN          .equ    12<<1                   ; (d)
         0000001A          = MD_DLI          .equ    13<<1                   ; [d]
         0000001C          = MD_SKY          .equ    14<<1                   ; (d,s),y
         0000001E          = MD_DIX          .equ    15<<1                   ; (d,x)
         00000020          = MD_DIY          .equ    16<<1                   ; (d),y
         00000022          = MD_DLY          .equ    17<<1                   ; [d],y
         00000024          = MD_IMP          .equ    18<<1                   ;
         00000026          = MD_REL          .equ    19<<1                   ; r
         00000028          = MD_RLG          .equ    20<<1                   ; rl
         0000002A          = MD_MOV          .equ    21<<1                   ; xyc
         0000002C          = MD_IMM          .equ    22<<1                   ; # (A or M)
         0000002E          = MD_INT          .equ    23<<1                   ; # (BRK/COP/WDM)
         00000030          = MD_IMX          .equ    24<<1                   ; # (X or Y)

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Data Areas
                             ;-------------------------------------------------------------------------------

                                             .page0
                                             .org    0

                             ;-------------------------------------------------------------------------------

                                             .bss
                                             .org    IO_PAGE

00:EF00  00                : TX_HEAD:        .space  1                       ; Transmit buffer head and tail
00:EF01  00                : TX_TAIL:        .space  1                       ; .. indices
00:EF02  00                : RX_HEAD:        .space  1                       ; Receive buffer head and tail
00:EF03  00                : RX_TAIL:        .space  1                       ; .. indices

00:EF04  00000000          : TICK:           .space  4                       ; Clock tick counter

00:EF08  0000000000000000> : TX_DATA:        .space  UART_BUFSIZ             ; Uart transmit buffer
00:EF48  0000000000000000> : RX_DATA:        .space  UART_BUFSIZ             ; Uart receive buffer

                                             .if     $ > $efff
                                             .error  "Exceeded I/O Page size"
                                             .endif

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Operating System Entry Points
                             ;-------------------------------------------------------------------------------
                                             .code
                                             .org    $f000

00:F000  826900            :                 brl     Uart1Tx                 ; JSL $f000 - UART1 Transmit
00:F003  829800            :                 brl     Uart1Rx                 ; JSL $f003 - UART1 Receive

                             ;===============================================================================
                             ; API Entry
                             ;-------------------------------------------------------------------------------

                             COPE:
00:F006  60                :                 rts
                             COPN:
00:F007  6B                :                 rtl

                             ;===============================================================================
                             ; Power On Reset
                             ;-------------------------------------------------------------------------------

                                             .longa  off
                                             .longi  off
                             RESET:
00:F008  78                :                 sei                             ; Ensure no interrupts
00:F009  D8                :                 cld

00:F00A  A208              :                 ldx     #8                      ; Clear FIFO indexes and timer
                                             repeat
00:F00C  CA                :                  dex
00:F00D  9E00EF            :                  stz    IO_PAGE,x
00:F010  D0FA              :                 until eq

00:F012  18                :                 clc                             ; Switch to native mode
00:F013  FB                :                 xce

                                             long_ai
00:F014  C230              +                 rep     #M_FLAG|X_FLAG
                           +                 .longa  on
                           +                 .longi  on
00:F016  A2FF0F            :                 ldx     #$0fff                  ; Set O/S stack
00:F019  9A                :                 txs
00:F01A  A90300            :                 lda     #INT_CLK|INT_U1RX       ; Enable clock and receive
00:F01D  4201              :                 wdm     #WDM_IER_WR
00:F01F  58                :                 cli                             ; Allow interrupts

                                             short_a                         ; Display a boot message
00:F020  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:F022  A234F0            :                 ldx     #BOOT_MESSAGE
                                             repeat
00:F025  BD0000            :                  lda    !0,x
00:F028  F007              :                  break eq

Portable 65xx Assembler [19.05]

00:F02A  226CF000          :                  jsl    Uart1Tx
00:F02E  E8                :                  inx
00:F02F  80F4              :                 forever

00:F031  0000              :                 brk     #0                      ; Then enter the monitor
00:F033  DB                :                 stp

00:F034  0D0A454D2D363543> : BOOT_MESSAGE:   .byte   CR,LF,"EM-65C816-ESP32 [19.06]"
00:F04D  0D0A284329323031> :                 .byte   CR,LF,"(C)2018-2019 Andrew Jacobs"
00:F069  0D0A00            :                 .byte   CR,LF,0

                             ;===============================================================================
                             ; Uart1 I/O
                             ;-------------------------------------------------------------------------------

                             ; Transmit the character in A via UART1 regardless of the state of the processor
                             ; and preserve all the registers. If the buffer is full then wait for it to
                             ; drain so there is at least one free space.

                                             .longa  ?
                                             .longi  ?
                             Uart1Tx:
00:F06C  08                :                 php                             ; Save MX bits
00:F06D  DA                :                 phx                             ; .. and X
                                             short_a                         ; Make A/M 8-bits
00:F06E  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:F070  48                :                 pha                             ; Sava A & B
00:F071  EB                :                 xba
00:F072  48                :                 pha
00:F073  AF01EF00          :                 lda     >TX_TAIL                ; Insert data at end of queue
00:F077  AA                :                 tax
00:F078  EB                :                 xba
00:F079  9F08EF00          :                 sta     >TX_DATA,x
00:F07D  E8                :                 inx                             ; Bump tail index
00:F07E  8A                :                 txa
00:F07F  293F              :                 and     #UART_BUFSIZ-1          ; .. and wrap
                                             repeat
00:F081  CF00EF00          :                  cmp    >TX_HEAD                ; If buffer is completely full
00:F085  D003              :                  break ne                       ; .. wait for it to drain
00:F087  CB                :                  wai
00:F088  80F7              :                 forever
00:F08A  78                :                 sei                             ; Update the tail
00:F08B  8F01EF00          :                 sta     >TX_TAIL
00:F08F  A900              :                 lda     #>INT_U1TX              ; Ensure TX interrupt enabled
00:F091  EB                :                 xba
00:F092  A904              :                 lda     #<INT_U1TX
00:F094  4202              :                 wdm     #WDM_IER_SET
00:F096  58                :                 cli
00:F097  68                :                 pla                             ; Restore B & A
00:F098  EB                :                 xba
00:F099  68                :                 pla
00:F09A  EB                :                 xba
00:F09B  FA                :                 plx                             ; Restore X

Portable 65xx Assembler [19.05]

00:F09C  28                :                 plp                             ; .. and MX flags
00:F09D  6B                :                 rtl                             ; Done

                             ; Receive a character from UART1 into A regardless of the state of rhe processor
                             ; preserving all other registers. If the buffer is empty then wait for some data
                             ; to arrive.

                                             .longa  ?
                                             .longi  ?
                             Uart1Rx:
00:F09E  08                :                 php                             ; Save MX bits & x
00:F09F  DA                :                 phx
                                             short_a                         ; Make A/M 8-bit
00:F0A0  E220              +                 sep     #M_FLAG
                           +                 .longa  off
                                             repeat
00:F0A2  AF02EF00          :                  lda    >RX_HEAD                ; Wait while buffer is empty
00:F0A6  CF03EF00          :                  cmp    >RX_TAIL
00:F0AA  D003              :                  break ne
00:F0AC  CB                :                  wai
00:F0AD  80F3              :                 forever
00:F0AF  AA                :                 tax
00:F0B0  BF48EF00          :                 lda     >RX_DATA,x
00:F0B4  48                :                 pha
00:F0B5  E8                :                 inx                             ; Bump head index
00:F0B6  8A                :                 txa
00:F0B7  293F              :                 and     #UART_BUFSIZ-1          ; .. and wrap
00:F0B9  8F02EF00          :                 sta     >RX_HEAD                ; Then update head
00:F0BD  68                :                 pla
00:F0BE  FA                :                 plx                             ; Restore X and flags
00:F0BF  28                :                 plp
00:F0C0  6B                :                 rtl

                             ;===============================================================================
                             ; Interrupt Handlers
                             ;-------------------------------------------------------------------------------

                             ; In emulation mode the interrupt handler must differentiate between IRQ and
                             ; BRK.

                                             .longa  off
                                             .longi  off
                             IRQBRK:
00:F0C1  48                :                 pha                             ; Save users A
00:F0C2  A302              :                 lda     2,s                     ; Recover P
00:F0C4  2910              :                 and     #$10
00:F0C6  F007              :                 if ne
00:F0C8  68                :                  pla                            ; Restores users A
00:F0C9  E220              : BRKN:            sep    #M_FLAG                 ; Ensure 8-bit A/M
00:F0CB  5C000004          :                  jml    Monitor                 ; Enter the monitor
                                             endif

00:F0CF  EB                :                 xba                             ; Save users B
00:F0D0  48                :                 pha

Portable 65xx Assembler [19.05]

00:F0D1  DA                :                 phx                             ; .. and X

00:F0D2  20E8F0            :                 jsr     IRQHandler              ; Do common processing

00:F0D5  FA                :                 plx                             ; Restore users X,
00:F0D6  68                :                 pla                             ; .. B, and A
00:F0D7  EB                :                 xba
00:F0D8  68                :                 pla
00:F0D9  40                :                 rti                             ; .. and continue

                             ;-------------------------------------------------------------------------------

                                             .longa  ?
                                             .longi  ?
                             IRQN:
                                             long_ai                         ; Then go full 16-bit
00:F0DA  C230              +                 rep     #M_FLAG|X_FLAG
                           +                 .longa  on
                           +                 .longi  on
00:F0DC  48                :                 pha                             ; .. and save C & X
00:F0DD  DA                :                 phx
                                             short_a                         ; Then make A/M 8-bits
00:F0DE  E220              +                 sep     #M_FLAG
                           +                 .longa  off

00:F0E0  20E8F0            :                 jsr     IRQHandler              ; Do commo processing

                                             long_a                          ; Restore users X & C
00:F0E3  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:F0E5  FA                :                 plx
00:F0E6  68                :                 pla
00:F0E7  40                :                 rti                             ; .. and continue

                             ;-------------------------------------------------------------------------------

                             ; This is the main IRQ handler used in both native and emulation mode. The size
                             ; of A/M access is 8-bits but X/Y are undefined. X is used to index into buffer
                             ; areas but is always loaded/stored via A.

                                             .longa  off
                                             .longi  ?
                             IRQHandler:
00:F0E8  8B                :                 phb                             ; Save users data bank
00:F0E9  4B                :                 phk                             ; And switch to bank $00
00:F0EA  AB                :                 plb

00:F0EB  4208              :                 wdm     #WDM_IFLAGS             ; Fetch interrupt flags
00:F0ED  48                :                 pha                             ; .. and save some copies
00:F0EE  48                :                 pha

00:F0EF  2901              :                 and     #INT_CLK                ; Is this a timer interrupt?
00:F0F1  F014              :                 if ne
00:F0F3  4207              :                  wdm    #WDM_IFR_CLR            ; Yes, clear it

Portable 65xx Assembler [19.05]


00:F0F5  EE04EF            :                  inc    TICK+0                  ; Bump the tick counter
00:F0F8  D00D              :                  if eq
00:F0FA  EE05EF            :                   inc   TICK+1
00:F0FD  D008              :                   if eq
00:F0FF  EE06EF            :                    inc  TICK+2
00:F102  D003              :                    if eq
00:F104  EE07EF            :                     inc TICK+3
                                                endif
                                               endif
                                              endif
                                             endif

00:F107  68                :                 pla                             ; Check for received data
00:F108  2902              :                 and     #INT_U1RX
00:F10A  F015              :                 if ne
00:F10C  AD03EF            :                  lda    RX_TAIL                 ; Save at tail of RX buffer
00:F10F  AA                :                  tax
00:F110  4211              :                  wdm    #WDM_U1RX
00:F112  9D48EF            :                  sta    RX_DATA,x
00:F115  E8                :                  inx                            ; Bump the index
00:F116  8A                :                  txa
00:F117  293F              :                  and    #UART_BUFSIZ-1          ; .. and wrap
00:F119  CD02EF            :                  cmp    RX_HEAD                 ; Is RX buffer complete full?
00:F11C  F003              :                  if ne
00:F11E  8D03EF            :                   sta   RX_TAIL                 ; No, save new tail
                                              endif
                                             endif

00:F121  68                :                 pla                             ; Ready to transmit?
00:F122  2904              :                 and     #INT_U1TX
00:F124  F019              :                 if ne
00:F126  AD00EF            :                  lda    TX_HEAD                 ; Fetch next character to send
00:F129  AA                :                  tax
00:F12A  BD08EF            :                  lda    TX_DATA,x
00:F12D  4210              :                  wdm    #WDM_U1TX               ; .. and transmit it
00:F12F  E8                :                  inx                            ; Bump the index
00:F130  8A                :                  txa
00:F131  293F              :                  and    #UART_BUFSIZ-1          ; .. and wrap
00:F133  8D00EF            :                  sta    TX_HEAD                 ; Save updated head
00:F136  CD01EF            :                  cmp    TX_TAIL                 ; Is the buffer now empty?
00:F139  D004              :                  if eq
00:F13B  A904              :                   lda   #INT_U1TX
00:F13D  4203              :                   wdm   #WDM_IER_CLR            ; Yes disable TX interrupt
                                              endif
                                             endif

00:F13F  AB                :                 plb
00:F140  60                :                 rts                             ; Done

                             ;===============================================================================
                             ; Unused Vector Trap
                             ;-------------------------------------------------------------------------------


Portable 65xx Assembler [19.05]

                             ; If any undefined vectors are invoked execution will end up here doing in an
                             ; infinite loop.

                             UnusedVector
00:F141  DB                :                 stp
00:F142  80FE              :                 bra     $

                             ;===============================================================================
                             ; Vectors
                             ;-------------------------------------------------------------------------------

                             ; Native Mode Vectors

                                             .org    $ffe0

00:FFE0  00000000          :                 .space  4                       ; Reserved
00:FFE4  07F0              :                 .word   COPN                    ; $FFE4 - COP(816)
00:FFE6  C9F0              :                 .word   BRKN                    ; $FFE6 - BRK(816)
00:FFE8  41F1              :                 .word   UnusedVector            ; $FFE8 - ABORT(816)
00:FFEA  41F1              :                 .word   UnusedVector            ; $FFEA - NMI(816)
00:FFEC  0000              :                 .space  2                       ; Reserved
00:FFEE  DAF0              :                 .word   IRQN                    ; $FFEE - IRQ(816)

                             ; Emulation Mode Vectors

                                             .org    $fff0
00:FFF0  00000000          :                 .space  4
00:FFF4  41F1              :                 .word   UnusedVector            ; $FFF4 - COP(C02)
00:FFF6  0000              :                 .space  2                       ; $Reserved
00:FFF8  41F1              :                 .word   UnusedVector            ; $FFF8 - ABORT(C02)
00:FFFA  41F1              :                 .word   UnusedVector            ; $FFFA - NMI(C02)
00:FFFC  08F0              :                 .word   RESET                   ; $FFFC - RESET(C02)
00:FFFE  C1F0              :                 .word   IRQBRK                  ; $FFFE - IRQBRK(C02)

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Video RAM
                             ;-------------------------------------------------------------------------------

                             ; Bank $01 is reserved for video data. The intended display will be 800x600
                             ; monochrome.

         00000320          = SVGA_WIDTH      .equ    800
         00000258          = SVGA_HEIGHT     .equ    600
         00000008          = PIXELS_PER_BYTE .equ    8
         00000064          = BYTES_PER_LINE  .equ    SVGA_WIDTH / PIXELS_PER_BYTE

                                             .bss
                                             .org    $010000

01:0000  0000000000000000> : VLINES          .space  SVGA_HEIGHT * 2         ; Scan line pointers

01:04B0  0000000000000000> : VDATA           .space  SVGA_HEIGHT * BYTES_PER_LINE
                             VEND            .space  0

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Operating System
                             ;-------------------------------------------------------------------------------

                                             .code
                                             .org    $040000

                             ; This is the target area for my operating system ROM.

                                             .page

Portable 65xx Assembler [19.05]

                             ;===============================================================================
                             ; Monitor
                             ;-------------------------------------------------------------------------------
                             ; This is a simple monitor based on my SXB-Hacker code. It allows access to the
                             ; emulated address space and the ability to download, inspect, change and run
                             ; machine language programs. It uses the interrupt driven I/O routines in the
                             ; boot ROM accessed by JSLs to $F000 and $F003.
                             ;;
                             ; If the monitor is not in use workspace page is never accessed and could be
                             ; used by another application.

                                             .bss
                                             .org    $00ee00

                             ; User Registers

00:EE00  00                : REG_E           .space  1                       ; In bit 7
00:EE01  00                : REG_P           .space  1
00:EE02  0000              : REG_C           .space  2
00:EE04  0000              : REG_X           .space  2
00:EE06  0000              : REG_Y           .space  2
00:EE08  0000              : REG_SP          .space  2
00:EE0A  0000              : REG_DP          .space  2
00:EE0C  0000              : REG_PC          .space  2
00:EE0E  00                : REG_PBR         .space  1
00:EE0F  00                : REG_DBR         .space  1

00:EE10  00                : CMD_LEN         .space  1                       ; Command buffer length
00:EE11  00                : BANK            .space  1
00:EE12  000000            : ADDRS           .space  3
00:EE15  000000            : ADDRL           .space  3

00:EE18  0000000000000000> :                 .align  128                     ; Gap used for stack
00:EE80  0000000000000000> : CMD_BUF         .space  128                     ; Command buffer

                             ;-------------------------------------------------------------------------------

                             ; The entry point is called from the boot ROM when a BRK instruction is executed
                             ; in either emulation or native mode. A/M has been set to 8-bits as part of the
                             ; interrupt handling.

                                             .code
                                             .longa  off
                                             .longi  ?
                                             .dpage  REG_E
                             Monitor:
04:0000  0B                :                 phd                             ; Push users DP
04:0001  F400EE            :                 pea     #REG_E                  ; Move to monitor's direct page
04:0004  2B                :                 pld
04:0005  8502              :                 sta     REG_C+0                 ; Save C
04:0007  EB                :                 xba
04:0008  8503              :                 sta     REG_C+1
04:000A  68                :                 pla                             ; Save DP
04:000B  850A              :                 sta     REG_DP+0

Portable 65xx Assembler [19.05]

04:000D  68                :                 pla
04:000E  850B              :                 sta     REG_DP+1
04:0010  68                :                 pla                             ; Save P
04:0011  8501              :                 sta     REG_P
04:0013  38                :                 sec                             ; Save PC (adjusting for BRK)
04:0014  68                :                 pla
                                             ;sbc    #2
04:0015  850C              :                 sta     REG_PC+0
04:0017  68                :                 pla
                                             ;sbc    #0
04:0018  850D              :                 sta     REG_PC+1
04:001A  18                :                 clc                             ; Switch to native mode
04:001B  FB                :                 xce
04:001C  640E              :                 stz     REG_PBR
04:001E  B003              :                 if cc
04:0020  68                :                  pla
04:0021  850E              :                  sta    REG_PBR                 ; Save PBR
                                             endif
04:0023  6600              :                 ror     REG_E                   ; Save E
04:0025  8B                :                 phb                             ; Save DBR
04:0026  68                :                 pla
04:0027  850F              :                 sta     REG_DBR
                                             long_i
04:0029  C210              +                 rep     #X_FLAG
                           +                 .longi  on
04:002B  8604              :                 stx     REG_X                   ; Save X
04:002D  8406              :                 sty     REG_Y                   ; Save Y
04:002F  BA                :                 tsx
04:0030  8608              :                 stx     REG_SP                  ; Save SP
04:0032  A27FEE            :                 ldx     #CMD_BUF-1              ; .. then load ours
04:0035  9A                :                 txs

04:0036  4B                :                 phk                             ; Set DBR to this bank (to
04:0037  AB                :                 plb                             ; .. access data and strings)
04:0038  58                :                 cli                             ; And allow interrupts

                             ;-------------------------------------------------------------------------------

                             ; Show the state of the users registers when the BRK was executed.

                             .ShowRegisters:
04:0039  20D801            :                 jsr     .NewLine

04:003C  A22A02            :                 ldx     #.StrPC
04:003F  20CC01            :                 jsr     .Print
04:0042  A50E              :                 lda     REG_PBR                 ; Show PBR and PC
04:0044  20F601            :                 jsr     .Hex2
04:0047  A93A              :                 lda     #':'
04:0049  200802            :                 jsr     .UartTx
04:004C  A50D              :                 lda     REG_PC+1
04:004E  EB                :                 xba
04:004F  A50C              :                 lda     REG_PC+0
04:0051  20F101            :                 jsr     .Hex4


Portable 65xx Assembler [19.05]

04:0054  A22E02            :                 ldx     #.StrE                  ; Show E bit
04:0057  20CC01            :                 jsr     .Print
04:005A  A930              :                 lda     #'0'
04:005C  2400              :                 bit     REG_E
04:005E  1001              :                 if mi
04:0060  1A                :                  inc    a
                                             endif
04:0061  200802            :                 jsr     .UartTx

04:0064  A23202            :                 ldx     #.StrP                  ; Show P
04:0067  20CC01            :                 jsr     .Print
04:006A  A20700            :                 ldx     #7
                                             repeat
04:006D  BD2202            :                  lda    .Mask,x                 ; .. as individual flags
04:0070  2501              :                  and    REG_P
04:0072  08                :                  php
04:0073  BD1A02            :                  lda    .Flag,x
04:0076  28                :                  plp
04:0077  D002              :                  if eq
04:0079  A92E              :                   lda   #'.'
                                              endif
04:007B  200802            :                  jsr    .UartTx
04:007E  CA                :                  dex
04:007F  10EC              :                 until mi

04:0081  A23602            :                 ldx     #.StrC                  ; Show C
04:0084  20CC01            :                 jsr     .Print
04:0087  2400              :                 bit     REG_E
04:0089  300E              :                 bmi     .ShortA
04:008B  A920              :                 lda     #M_FLAG
04:008D  2401              :                 bit     REG_P
04:008F  D008              :                 if eq
04:0091  200D02            :                  jsr    .OpenBracket
04:0094  20E101            :                  jsr    .HexCHi
04:0097  8006              :                 else
04:0099  20E101            : .ShortA:         jsr    .HexCHi
04:009C  200D02            :                  jsr    .OpenBracket
                                             endif
04:009F  A502              :                 lda     REG_C+0
04:00A1  20F601            :                 jsr     .Hex2
04:00A4  201102            :                 jsr     .CloseBracket

04:00A7  A23A02            :                 ldx     #.StrX                  ; Show X
04:00AA  20CC01            :                 jsr     .Print
04:00AD  2400              :                 bit     REG_E
04:00AF  300E              :                 bmi     .ShortX
04:00B1  A910              :                 lda     #X_FLAG
04:00B3  2401              :                 bit     REG_P
04:00B5  D008              :                 if eq
04:00B7  200D02            :                  jsr    .OpenBracket
04:00BA  20E501            :                  jsr    .HexXHi
04:00BD  8006              :                 else
04:00BF  20E501            : .ShortX:         jsr    .HexXHi
04:00C2  200D02            :                  jsr    .OpenBracket

Portable 65xx Assembler [19.05]

                                             endif
04:00C5  A504              :                 lda     REG_X+0
04:00C7  20F601            :                 jsr     .Hex2
04:00CA  201102            :                 jsr     .CloseBracket

04:00CD  A23E02            :                 ldx     #.StrY                  ; Show Y
04:00D0  20CC01            :                 jsr     .Print
04:00D3  2400              :                 bit     REG_E
04:00D5  300E              :                 bmi     .ShortY
04:00D7  A910              :                 lda     #X_FLAG
04:00D9  2401              :                 bit     REG_P
04:00DB  D008              :                 if eq
04:00DD  200D02            :                  jsr    .OpenBracket
04:00E0  20E901            :                  jsr    .HexYHi
04:00E3  8006              :                 else
04:00E5  20E901            : .ShortY:         jsr    .HexYHi
04:00E8  200D02            :                  jsr    .OpenBracket
                                             endif
04:00EB  A506              :                 lda     REG_Y+0
04:00ED  20F601            :                 jsr     .Hex2
04:00F0  201102            :                 jsr     .CloseBracket

04:00F3  A24202            :                 ldx     #.StrDP                 ; Show DP
04:00F6  20CC01            :                 jsr     .Print
04:00F9  A50B              :                 lda     REG_DP+1
04:00FB  EB                :                 xba
04:00FC  A50A              :                 lda     REG_DP+0
04:00FE  20F101            :                 jsr     .Hex4

04:0101  A24702            :                 ldx     #.StrSP                 ; Show SP
04:0104  20CC01            :                 jsr     .Print
04:0107  2400              :                 bit     REG_E
04:0109  1008              :                 if mi
04:010B  20ED01            :                  jsr    .HexSPHi
04:010E  200D02            :                  jsr    .OpenBracket
04:0111  8006              :                 else
04:0113  200D02            :                  jsr    .OpenBracket
04:0116  20ED01            :                  jsr    .HexSPHi
                                             endif
04:0119  A508              :                 lda     REG_SP+0
04:011B  20F601            :                 jsr     .Hex2
04:011E  201102            :                 jsr     .CloseBracket

04:0121  A24C02            :                 ldx     #.StrDBR                ; Show DBR
04:0124  20CC01            :                 jsr     .Print
04:0127  A50F              :                 lda     REG_DBR
04:0129  20F601            :                 jsr     .Hex2

                             ;-------------------------------------------------------------------------------

                             ; Read a command from the user into the buffer area. Pressing either BS or DEL
                             ; erases the last character.

                             .NewCommand:

Portable 65xx Assembler [19.05]

04:012C  6410              :                 stz     CMD_LEN                 ; Clear command buffer
04:012E  20D801            :                 jsr     .NewLine                ; Print the entry prompt
04:0131  A92E              :                 lda     #'.'
04:0133  200802            :                 jsr     .UartTx

04:0136  A20000            :                 ldx     #0
                                             repeat
04:0139  8A                :                  txa
04:013A  C510              :                  cmp    CMD_LEN                 ; Any forced characters?
04:013C  F008              :                  break  eq
04:013E  B580              :                  lda    CMD_BUF,x               ; Yes, print one
04:0140  200802            :                  jsr    .UartTx
04:0143  E8                :                  inx
04:0144  80F3              :                 forever

                                             repeat
04:0146  201502            :                  jsr    .UartRx                 ; Read a real character
04:0149  9580              :                  sta    CMD_BUF,x               ; .. and save it

04:014B  C908              :                  cmp    #BS                     ; Map BS to DEL
04:014D  F00C              :                  beq    .BackSpace
04:014F  C90D              :                  cmp    #CR                     ; End of input?
04:0151  F024              :                  break  eq

04:0153  C920              :                  cmp    #' '                    ; Printable?
04:0155  9019              :                  if cs
04:0157  C97F              :                   cmp   #DEL                    ; Delete?
04:0159  9012              :                   if cs
04:015B  8A                : .BackSpace:        txa                          ; Is buffer empty?
04:015C  F012              :                    beq  .Beep                   ; Yes, make a noise

04:015E  A908              :                    lda  #BS                     ; Erase the last character
04:0160  200802            :                    jsr  .UartTx
04:0163  A920              :                    lda  #' '
04:0165  200802            :                    jsr  .UartTx
04:0168  A908              :                    lda  #BS
04:016A  CA                :                    dex
04:016B  8001              :                   else
04:016D  E8                :                    inx                          ; Keep the last character
                                               endif
04:016E  8002              :                  else
04:0170  A907              : .Beep:            lda   #BEL
                                              endif
04:0172  200802            :                  jsr    .UartTx                 ; And echo char, BEL or BS
04:0175  80CF              :                 forever

04:0177  8A                :                 txa                             ; Save the buffer length
04:0178  8510              :                 sta     CMD_LEN

04:017A  A900              :                 lda     #0                      ; Start processing at the
04:017C  AA                :                 tax                             ; .. start of the line
04:017D  20B901            :                 jsr     .SkipSpaces
04:0180  20C101            :                 jsr     .ToUpper


Portable 65xx Assembler [19.05]

04:0183  C90D              :                 cmp     #CR
04:0185  F0A5              :                 beq     .NewCommand

                             ;-------------------------------------------------------------------------------

04:0187  C93F              :                 cmp     #'?'
04:0189  D008              :                 if eq
04:018B  A26C02            :                  ldx    #.StrHelp
04:018E  20CC01            :                  jsr    .Print
04:0191  8099              :                  bra    .NewCommand
                                             endif

                             ;-------------------------------------------------------------------------------

04:0193  C944              :                 cmp     #'D'
04:0195  D003              :                 if eq

04:0197  4C2C01            :                  jmp    .NewCommand
                                             endif

                             ;-------------------------------------------------------------------------------

04:019A  C94D              :                 cmp     #'M'
04:019C  D003              :                 if eq

04:019E  4C2C01            :                  jmp    .NewCommand
                                             endif

                             ;-------------------------------------------------------------------------------

04:01A1  C951              :                 cmp     #'Q'
04:01A3  D004              :                 if eq
04:01A5  20D801            :                  jsr    .NewLine
04:01A8  DB                :                  stp
                                             endif

                             ;-------------------------------------------------------------------------------

04:01A9  C952              :                 cmp     #'R'
04:01AB  D003              :                 if eq

04:01AD  4C3900            :                  jmp    .ShowRegisters
                                             endif

                             ;-------------------------------------------------------------------------------

                             .ShowError
04:01B0  A25202            :                 ldx     #.StrError              ; Print the error string
04:01B3  20CC01            :                 jsr     .Print
04:01B6  4C2C01            :                 jmp     .NewCommand

                             ;-------------------------------------------------------------------------------

                                             .longa  off

Portable 65xx Assembler [19.05]

                                             .longi  on
                             .GetAddr:

                                             .longa  off
                                             .longi  on
                             .GetWord:

                                             .longa  off
                                             .longi  on
                             .GetByte:

                             ;-------------------------------------------------------------------------------

                                             .longa  off
                                             .longi  on
                             .SkipSpaces:
                                             repeat
04:01B9  B580              :                  lda    CMD_BUF,x               ; Fetch characters
04:01BB  E8                :                  inx
04:01BC  C920              :                  cmp #' '                       ; .. until a non-space
04:01BE  F0F9              :                 until ne
04:01C0  60                :                 rts                             ; Done

                                             .longa  off
                             .ToUpper:
04:01C1  C961              :                 cmp     #'a'                    ; If A is 'a'..'z'
04:01C3  9006              :                 if cs
04:01C5  C97B              :                  cmp    #'z'+1
04:01C7  B002              :                  if cc
04:01C9  E91F              :                   sbc   #31                     ; .. then capitalise
                                              endif
                                             endif
04:01CB  60                :                 rts


                             ;-------------------------------------------------------------------------------

                             ; Print the null terminated string pointed to the address in the X register to
                             ; the UART.

                                             .longa  off
                                             .longi  on
                             .Print:
                                             repeat
04:01CC  BD0000            :                  lda    !0,x
04:01CF  D001              :                  if eq
04:01D1  60                :                   rts
                                              endif
04:01D2  200802            :                  jsr    .UartTx
04:01D5  E8                :                  inx
04:01D6  80F4              :                 forever

                             ; Output a CR+LF character sequence to move the cursor to the next line.


Portable 65xx Assembler [19.05]

                                             .longa  off
                             .NewLine:
04:01D8  A90D              :                 lda     #CR
04:01DA  200802            :                 jsr     .UartTx
04:01DD  A90A              :                 lda     #LF
04:01DF  8027              :                 bra     .UartTx

                             ;-------------------------------------------------------------------------------

                             ; Output the high byte of the C register in hex.

                                             .longa  off
                             .HexCHi:
04:01E1  A503              :                 lda     REG_C+1
04:01E3  8011              :                 bra     .Hex2

                             ; Output the high byte of the X register in hex.

                                             .longa  off
                             .HexXHi:
04:01E5  A505              :                 lda     REG_X+1
04:01E7  800D              :                 bra     .Hex2

                             ; Output the high byte of the Y register in hex.

                                             .longa  off
                             .HexYHi:
04:01E9  A507              :                 lda     REG_Y+1
04:01EB  8009              :                 bra     .Hex2

                             ; Output the high byte of the SP register in hex.

                                             .longa  off
                             .HexSPHi:
04:01ED  A509              :                 lda     REG_SP+1
04:01EF  8005              :                 bra     .Hex2

                             ; Print the value in the C register in hex.

                                             .longa  off
                             .Hex4:
04:01F1  EB                :                 xba                             ; Swap the high and low bytes
04:01F2  20F601            :                 jsr     .Hex2                   ; Print the high byte
04:01F5  EB                :                 xba                             ; Swap back then ..

                             ; Print the value in the A registers in hex.

                                             .longa  off
                             .Hex2:
04:01F6  48                :                 pha                             ; Save the byte
04:01F7  4A                :                 lsr     a                       ; Shift down the high nybble
04:01F8  4A                :                 lsr     a
04:01F9  4A                :                 lsr     a
04:01FA  4A                :                 lsr     a

Portable 65xx Assembler [19.05]

04:01FB  20FF01            :                 jsr     .Hex                    ; Print it
04:01FE  68                :                 pla                             ; Recover the byte then ..

                             ; Print the value in the low nybble of A in hex.

                                             .longa  off
                             .Hex:
04:01FF  290F              :                 and     #$0f                    ; Strip out the low nybble
04:0201  F8                :                 sed                             ; And make printable
04:0202  18                :                 clc
04:0203  6990              :                 adc     #$90
04:0205  6940              :                 adc     #$40
04:0207  D8                :                 cld                             ; Then drop into ..

                             ;-------------------------------------------------------------------------------

                             ; Transmit the character in A using the UART. Poll the UART to see if its
                             ; busy before outputing the character.

                                             .longa  ?
                             .UartTx:
04:0208  2200F000          :                 jsl     $00f000
04:020C  60                :                 rts

                             ; Output an openning bracket character.

                                             .longa  off
                             .OpenBracket:
04:020D  A95B              :                 lda     #'['
04:020F  80F7              :                 bra     .UartTx

                             ; Output a closing bracket character.

                                             .longa  off
                             .CloseBracket:
04:0211  A95D              :                 lda     #']'
04:0213  80F3              :                 bra     .UartTx

                             ; Receive a character from UART performing a polled wait for data to arrive.

                                             .longa  ?
                             .UartRx:
04:0215  2203F000          :                 jsl     >$00f003
04:0219  60                :                 rts

                             ;-------------------------------------------------------------------------------

                             ; 65xx Flags Bits

04:021A  435A4944584D564E  : .Flag:          .byte   'C','Z','I','D','X','M','V','N'
04:0222  0102040810204080  : .Mask:          .byte   $01,$02,$04,$08,$10,$20,$40,$80

                             ; Various Strings


Portable 65xx Assembler [19.05]

04:022A  50433D00          : .StrPC:         .byte   "PC=",0
04:022E  20453D00          : .StrE:          .byte   " E=",0
04:0232  20503D00          : .StrP:          .byte   " P=",0
04:0236  20433D00          : .StrC:          .byte   " C=",0
04:023A  20583D00          : .StrX:          .byte   " X=",0
04:023E  20593D00          : .StrY:          .byte   " Y=",0
04:0242  2044503D00        : .StrDP:         .byte   " DP=",0
04:0247  2053503D00        : .StrSP:         .byte   " SP=",0
04:024C  204442523D00      : .StrDBR:        .byte   " DBR=",0

04:0252  0D0A4572726F7220> : .StrError:      .byte   CR,LF,"Error - Type ? for help",0

                             .StrHelp:
04:026C  0D0A3F202D204469> :                 .byte   CR,LF,"? - Display this help"
04:0283  00                :                 .byte   0

                             ;-------------------------------------------------------------------------------

                             OPCODES:
04:0284  16522852          :                 .byte   OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
04:0288  A0520452          :                 .byte   OP_TSB,OP_ORA,OP_ASL,OP_ORA
04:028C  6252045E          :                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_PHD
04:0290  A0520452          :                 .byte   OP_TSB,OP_ORA,OP_ASL,OP_ORA
04:0294  12525252          :                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
04:0298  9E520452          :                 .byte   OP_TRB,OP_ORA,OP_ASL,OP_ORA
04:029C  1E52369A          :                 .byte   OP_CLC,OP_ORA,OP_INC,OP_TCS
04:02A0  9E520452          :                 .byte   OP_TRB,OP_ORA,OP_ASL,OP_ORA
04:02A4  42024002          :                 .byte   OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
04:02A8  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:02AC  6E02766C          :                 .byte   OP_PLP,OP_AND,OP_ROL,OP_PLD
04:02B0  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:02B4  0E020202          :                 .byte   OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
04:02B8  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:02BC  82022EA2          :                 .byte   OP_SEC,OP_AND,OP_DEC,OP_TSC
04:02C0  0C027602          :                 .byte   OP_BIT,OP_AND,OP_ROL,OP_AND
04:02C4  7A34B234          :                 .byte   OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
04:02C8  4E344A34          :                 .byte   OP_MVP,OP_EOR,OP_LSR,OP_EOR
04:02CC  5A344A60          :                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_PHK
04:02D0  3E344A34          :                 .byte   OP_JMP,OP_EOR,OP_LSR,OP_EOR
04:02D4  1A343434          :                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
04:02D8  4C344A34          :                 .byte   OP_MVN,OP_EOR,OP_LSR,OP_EOR
04:02DC  22346698          :                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_TCD
04:02E0  3E344A34          :                 .byte   OP_JMP,OP_EOR,OP_LSR,OP_EOR
04:02E4  7E005800          :                 .byte   OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
04:02E8  92007800          :                 .byte   OP_STZ,OP_ADC,OP_ROR,OP_ADC
04:02EC  6800787C          :                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_RTL
04:02F0  3E007800          :                 .byte   OP_JMP,OP_ADC,OP_ROR,OP_ADC
04:02F4  1C000000          :                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
04:02F8  92007800          :                 .byte   OP_STZ,OP_ADC,OP_ROR,OP_ADC
04:02FC  8600729C          :                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_TDC
04:0300  3E007800          :                 .byte   OP_JMP,OP_ADC,OP_ROR,OP_ADC
04:0304  148A188A          :                 .byte   OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
04:0308  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:030C  320CA65C          :                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_PHB

Portable 65xx Assembler [19.05]

04:0310  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:0314  068A8A8A          :                 .byte   OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
04:0318  908A8E8A          :                 .byte   OP_STY,OP_STA,OP_STX,OP_STA
04:031C  AC8AA8AA          :                 .byte   OP_TYA,OP_STA,OP_TXS,OP_TXY
04:0320  928A928A          :                 .byte   OP_STZ,OP_STA,OP_STZ,OP_STA
04:0324  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
04:0328  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:032C  9644946A          :                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_PLB
04:0330  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:0334  08444444          :                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_LDA     ; B0
04:0338  44484644          :                 .byte   OP_LDA,OP_LDY,OP_LDX,OP_LDA
04:033C  2444A4AE          :                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_TYX
04:0340  48444644          :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_LDA
04:0344  2C267426          :                 .byte   OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
04:0348  2C262E26          :                 .byte   OP_CPY,OP_CMP,OP_DEC,OP_CMP
04:034C  3A2630B0          :                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI
04:0350  2C262E26          :                 .byte   OP_CPY,OP_CMP,OP_DEC,OP_CMP
04:0354  10262626          :                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
04:0358  56262E26          :                 .byte   OP_PEI,OP_CMP,OP_DEC,OP_CMP
04:035C  2026648C          :                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP
04:0360  3C262E26          :                 .byte   OP_JML,OP_CMP,OP_DEC,OP_CMP
04:0364  2A808880          :                 .byte   OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
04:0368  2A803680          :                 .byte   OP_CPX,OP_SBC,OP_INC,OP_SBC
04:036C  388050B4          :                 .byte   OP_INX,OP_SBC,OP_NOP,OP_XBA
04:0370  2A803680          :                 .byte   OP_CPX,OP_SBC,OP_INC,OP_SBC
04:0374  0A808080          :                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
04:0378  54803680          :                 .byte   OP_PEA,OP_SBC,OP_INC,OP_SBC
04:037C  848070B6          :                 .byte   OP_SED,OP_SBC,OP_PLX,OP_XCE
04:0380  42803680          :                 .byte   OP_JSR,OP_SBC,OP_INC,OP_SBC

                             MODES:
04:0384  2E1E2E12          :                 .byte   MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
04:0388  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:038C  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:0390  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0394  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
04:0398  10141422          :                 .byte   MD_DPG,MD_DPX,MD_DPX,MD_DLY
04:039C  24060224          :                 .byte   MD_IMP,MD_ABY,MD_ACC,MD_IMP
04:03A0  0004040A          :                 .byte   MD_ABS,MD_ABX,MD_ABX,MD_ALX
04:03A4  001E0812          :                 .byte   MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
04:03A8  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:03AC  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:03B0  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:03B4  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
04:03B8  14141422          :                 .byte   MD_DPX,MD_DPX,MD_DPX,MD_DLY
04:03BC  24060224          :                 .byte   MD_IMP,MD_ABY,MD_ACC,MD_IMP
04:03C0  0404040A          :                 .byte   MD_ABX,MD_ABX,MD_ABX,MD_ALX
04:03C4  241E2E12          :                 .byte   MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
04:03C8  2A10101A          :                 .byte   MD_MOV,MD_DPG,MD_DPG,MD_DLI
04:03CC  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:03D0  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:03D4  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
04:03D8  2A141422          :                 .byte   MD_MOV,MD_DPX,MD_DPX,MD_DLY
04:03DC  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP

Portable 65xx Assembler [19.05]

04:03E0  0804040A          :                 .byte   MD_ALG,MD_ABX,MD_ABX,MD_ALX
04:03E4  241E2412          :                 .byte   MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
04:03E8  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:03EC  242C0224          :                 .byte   MD_IMP,MD_IMM,MD_ACC,MD_IMP
04:03F0  0C000008          :                 .byte   MD_AIN,MD_ABS,MD_ABS,MD_ALG
04:03F4  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
04:03F8  14141422          :                 .byte   MD_DPX,MD_DPX,MD_DPX,MD_DLY
04:03FC  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0400  0E04040A          :                 .byte   MD_AIX,MD_ABX,MD_ABX,MD_ALX
04:0404  261E2812          :                 .byte   MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
04:0408  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:040C  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:0410  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0414  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
04:0418  14141622          :                 .byte   MD_DPX,MD_DPX,MD_DPY,MD_DLY
04:041C  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0420  0004040A          :                 .byte   MD_ABS,MD_ABX,MD_ABX,MD_ALX
04:0424  301E3012          :                 .byte   MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
04:0428  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:042C  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:0430  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0434  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
04:0438  14141622          :                 .byte   MD_DPX,MD_DPX,MD_DPY,MD_DLY
04:043C  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0440  0404060A          :                 .byte   MD_ABX,MD_ABX,MD_ABY,MD_ALX
04:0444  301E2E12          :                 .byte   MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
04:0448  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:044C  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:0450  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0454  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
04:0458  24141422          :                 .byte   MD_IMP,MD_DPX,MD_DPX,MD_DLY
04:045C  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0460  0C04040A          :                 .byte   MD_AIN,MD_ABX,MD_ABX,MD_ALX
04:0464  301E2E12          :                 .byte   MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
04:0468  1010101A          :                 .byte   MD_DPG,MD_DPG,MD_DPG,MD_DLI
04:046C  242C2424          :                 .byte   MD_IMP,MD_IMM,MD_IMP,MD_IMP
04:0470  00000008          :                 .byte   MD_ABS,MD_ABS,MD_ABS,MD_ALG
04:0474  2620181C          :                 .byte   MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
04:0478  24141422          :                 .byte   MD_IMP,MD_DPX,MD_DPX,MD_DLY
04:047C  24062424          :                 .byte   MD_IMP,MD_ABY,MD_IMP,MD_IMP
04:0480  0E04040A          :                 .byte   MD_AIX,MD_ABX,MD_ABX,MD_ALX

                             MNEMONICS:
                                             MNEM    'A','D','C'
04:0484  8304              +                 .word   (('A'-'@')<<10)|(('D'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'A','N','D'
04:0486  C405              +                 .word   (('A'-'@')<<10)|(('N'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'A','S','L'
04:0488  6C06              +                 .word   (('A'-'@')<<10)|(('S'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','C','C'
04:048A  6308              +                 .word   (('B'-'@')<<10)|(('C'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'B','C','S'
04:048C  7308              +                 .word   (('B'-'@')<<10)|(('C'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'B','E','Q'

Portable 65xx Assembler [19.05]

04:048E  B108              +                 .word   (('B'-'@')<<10)|(('E'-'@')<<5)|(('Q'-'@')<<0)
                                             MNEM    'B','I','T'
04:0490  3409              +                 .word   (('B'-'@')<<10)|(('I'-'@')<<5)|(('T'-'@')<<0)
                                             MNEM    'B','M','I'
04:0492  A909              +                 .word   (('B'-'@')<<10)|(('M'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'B','N','E'
04:0494  C509              +                 .word   (('B'-'@')<<10)|(('N'-'@')<<5)|(('E'-'@')<<0)
                                             MNEM    'B','P','L'
04:0496  0C0A              +                 .word   (('B'-'@')<<10)|(('P'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','R','A'
04:0498  410A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'B','R','K'
04:049A  4B0A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('K'-'@')<<0)
                                             MNEM    'B','R','L'
04:049C  4C0A              +                 .word   (('B'-'@')<<10)|(('R'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'B','V','C'
04:049E  C30A              +                 .word   (('B'-'@')<<10)|(('V'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'B','V','S'
04:04A0  D30A              +                 .word   (('B'-'@')<<10)|(('V'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'C','L','C'
04:04A2  830D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'C','L','D'
04:04A4  840D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'C','L','I'
04:04A6  890D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'C','L','V'
04:04A8  960D              +                 .word   (('C'-'@')<<10)|(('L'-'@')<<5)|(('V'-'@')<<0)
                                             MNEM    'C','M','P'
04:04AA  B00D              +                 .word   (('C'-'@')<<10)|(('M'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'C','O','P'
04:04AC  F00D              +                 .word   (('C'-'@')<<10)|(('O'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'C','P','X'
04:04AE  180E              +                 .word   (('C'-'@')<<10)|(('P'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'C','P','Y'
04:04B0  190E              +                 .word   (('C'-'@')<<10)|(('P'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'D','E','C'
04:04B2  A310              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'D','E','X'
04:04B4  B810              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'D','E','Y'
04:04B6  B910              +                 .word   (('D'-'@')<<10)|(('E'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'E','O','R'
04:04B8  F215              +                 .word   (('E'-'@')<<10)|(('O'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'I','N','C'
04:04BA  C325              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'I','N','X'
04:04BC  D825              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'I','N','Y'
04:04BE  D925              +                 .word   (('I'-'@')<<10)|(('N'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'J','M','L'
04:04C0  AC29              +                 .word   (('J'-'@')<<10)|(('M'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'J','M','P'
04:04C2  B029              +                 .word   (('J'-'@')<<10)|(('M'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'J','S','L'

Portable 65xx Assembler [19.05]

04:04C4  6C2A              +                 .word   (('J'-'@')<<10)|(('S'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'J','S','R'
04:04C6  722A              +                 .word   (('J'-'@')<<10)|(('S'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'L','D','A'
04:04C8  8130              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'L','D','X'
04:04CA  9830              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'L','D','Y'
04:04CC  9930              +                 .word   (('L'-'@')<<10)|(('D'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'L','S','R'
04:04CE  7232              +                 .word   (('L'-'@')<<10)|(('S'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'M','V','N'
04:04D0  CE36              +                 .word   (('M'-'@')<<10)|(('V'-'@')<<5)|(('N'-'@')<<0)
                                             MNEM    'M','V','P'
04:04D2  D036              +                 .word   (('M'-'@')<<10)|(('V'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'N','O','P'
04:04D4  F039              +                 .word   (('N'-'@')<<10)|(('O'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'O','R','A'
04:04D6  413E              +                 .word   (('O'-'@')<<10)|(('R'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','E','A'
04:04D8  A140              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','E','I'
04:04DA  A940              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'P','E','R'
04:04DC  B240              +                 .word   (('P'-'@')<<10)|(('E'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'P','H','A'
04:04DE  0141              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','H','B'
04:04E0  0241              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'P','H','D'
04:04E2  0441              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'P','H','K'
04:04E4  0B41              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('K'-'@')<<0)
                                             MNEM    'P','H','P'
04:04E6  1041              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'P','H','X'
04:04E8  1841              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'P','H','Y'
04:04EA  1941              +                 .word   (('P'-'@')<<10)|(('H'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'P','L','A'
04:04EC  8141              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'P','L','B'
04:04EE  8241              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'P','L','D'
04:04F0  8441              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'P','L','P'
04:04F2  9041              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'P','L','X'
04:04F4  9841              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'P','L','Y'
04:04F6  9941              +                 .word   (('P'-'@')<<10)|(('L'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'R','E','P'
04:04F8  B048              +                 .word   (('R'-'@')<<10)|(('E'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'R','O','L'

Portable 65xx Assembler [19.05]

04:04FA  EC49              +                 .word   (('R'-'@')<<10)|(('O'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'R','O','R'
04:04FC  F249              +                 .word   (('R'-'@')<<10)|(('O'-'@')<<5)|(('R'-'@')<<0)
                                             MNEM    'R','T','I'
04:04FE  894A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'R','T','L'
04:0500  8C4A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('L'-'@')<<0)
                                             MNEM    'R','T','S'
04:0502  934A              +                 .word   (('R'-'@')<<10)|(('T'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'S','B','C'
04:0504  434C              +                 .word   (('S'-'@')<<10)|(('B'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'S','E','C'
04:0506  A34C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'S','E','D'
04:0508  A44C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'S','E','I'
04:050A  A94C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'S','E','P'
04:050C  B04C              +                 .word   (('S'-'@')<<10)|(('E'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'S','T','A'
04:050E  814E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'S','T','P'
04:0510  904E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('P'-'@')<<0)
                                             MNEM    'S','T','X'
04:0512  984E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'S','T','Y'
04:0514  994E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'S','T','Z'
04:0516  9A4E              +                 .word   (('S'-'@')<<10)|(('T'-'@')<<5)|(('Z'-'@')<<0)
                                             MNEM    'T','A','X'
04:0518  3850              +                 .word   (('T'-'@')<<10)|(('A'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'T','A','Y'
04:051A  3950              +                 .word   (('T'-'@')<<10)|(('A'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'T','C','D'
04:051C  6450              +                 .word   (('T'-'@')<<10)|(('C'-'@')<<5)|(('D'-'@')<<0)
                                             MNEM    'T','C','S'
04:051E  7350              +                 .word   (('T'-'@')<<10)|(('C'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'T','D','C'
04:0520  8350              +                 .word   (('T'-'@')<<10)|(('D'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'T','R','B'
04:0522  4252              +                 .word   (('T'-'@')<<10)|(('R'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'T','S','B'
04:0524  6252              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('B'-'@')<<0)
                                             MNEM    'T','S','C'
04:0526  6352              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('C'-'@')<<0)
                                             MNEM    'T','S','X'
04:0528  7852              +                 .word   (('T'-'@')<<10)|(('S'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'T','X','A'
04:052A  0153              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'T','X','S'
04:052C  1353              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('S'-'@')<<0)
                                             MNEM    'T','X','Y'
04:052E  1953              +                 .word   (('T'-'@')<<10)|(('X'-'@')<<5)|(('Y'-'@')<<0)
                                             MNEM    'T','Y','A'

Portable 65xx Assembler [19.05]

04:0530  2153              +                 .word   (('T'-'@')<<10)|(('Y'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'T','Y','X'
04:0532  3853              +                 .word   (('T'-'@')<<10)|(('Y'-'@')<<5)|(('X'-'@')<<0)
                                             MNEM    'W','A','I'
04:0534  295C              +                 .word   (('W'-'@')<<10)|(('A'-'@')<<5)|(('I'-'@')<<0)
                                             MNEM    'W','D','M'
04:0536  8D5C              +                 .word   (('W'-'@')<<10)|(('D'-'@')<<5)|(('M'-'@')<<0)
                                             MNEM    'X','B','A'
04:0538  4160              +                 .word   (('X'-'@')<<10)|(('B'-'@')<<5)|(('A'-'@')<<0)
                                             MNEM    'X','C','E'
04:053A  6560              +                 .word   (('X'-'@')<<10)|(('C'-'@')<<5)|(('E'-'@')<<0)

                                             .end


Portable 65xx Assembler [19.05]

Symbol Table

ADDRL                            0000EE15  | MD_ABS                           00000000
ADDRS                            0000EE12  | OP_ADC                           00000000
BANK                             0000EE11  | WDM_IER_RD                       00000000
BEL                              00000007  | __6501__                         00000000
BOOT_MESSAGE                     0000F034  | __6502__                         00000000
BRKN                             0000F0C9  | __65832__                        00000000
BS                               00000008  | __65C02__                        00000000
BYTES_PER_LINE                   00000064  | __65SC02__                       00000000
B_FLAG                           00000010  | C_FLAG                           00000001
CMD_BUF                          0000EE80  | INT_CLK                          00000001
CMD_LEN                          0000EE10  | WDM_IER_WR                       00000001
COPE                             0000F006  | __65816__                        00000001
COPN                             0000F007  | INT_U1RX                         00000002
CR                               0000000D  | MD_ACC                           00000002
C_FLAG                           00000001  | OP_AND                           00000002
DEL                              0000007F  | WDM_IER_SET                      00000002
D_FLAG                           00000008  | Z_FLAG                           00000002
INT_CLK                          00000001  | WDM_IER_CLR                      00000003
INT_U1RX                         00000002  | INT_U1TX                         00000004
INT_U1TX                         00000004  | I_FLAG                           00000004
IO_PAGE                          0000EF00  | MD_ABX                           00000004
IRQBRK                           0000F0C1  | OP_ASL                           00000004
IRQHandler                       0000F0E8  | WDM_IFR_RD                       00000004
IRQN                             0000F0DA  | WDM_IFR_WR                       00000005
I_FLAG                           00000004  | MD_ABY                           00000006
LF                               0000000A  | OP_BCC                           00000006
MD_ABS                           00000000  | WDM_IFR_SET                      00000006
MD_ABX                           00000004  | BEL                              00000007
MD_ABY                           00000006  | WDM_IFR_CLR                      00000007
MD_ACC                           00000002  | BS                               00000008
MD_AIN                           0000000C  | D_FLAG                           00000008
MD_AIX                           0000000E  | MD_ALG                           00000008
MD_ALG                           00000008  | OP_BCS                           00000008
MD_ALX                           0000000A  | PIXELS_PER_BYTE                  00000008
MD_DIN                           00000018  | WDM_IFLAGS                       00000008
MD_DIX                           0000001E  | LF                               0000000A
MD_DIY                           00000020  | MD_ALX                           0000000A
MD_DLI                           0000001A  | OP_BEQ                           0000000A
MD_DLY                           00000022  | MD_AIN                           0000000C
MD_DPG                           00000010  | OP_BIT                           0000000C
MD_DPX                           00000014  | CR                               0000000D
MD_DPY                           00000016  | MD_AIX                           0000000E
MD_IMM                           0000002C  | OP_BMI                           0000000E
MD_IMP                           00000024  | B_FLAG                           00000010
MD_IMX                           00000030  | MD_DPG                           00000010
MD_INT                           0000002E  | OP_BNE                           00000010
MD_MOV                           0000002A  | WDM_U1TX                         00000010
MD_REL                           00000026  | X_FLAG                           00000010
MD_RLG                           00000028  | WDM_U1RX                         00000011
MD_SKY                           0000001C  | MD_STK                           00000012
MD_STK                           00000012  | OP_BPL                           00000012
MNEMONICS                        00040484  | MD_DPX                           00000014

Portable 65xx Assembler [19.05]

MODES                            00040384  | OP_BRA                           00000014
MON_PAGE                         0000EE00  | MD_DPY                           00000016
M_FLAG                           00000020  | OP_BRK                           00000016
Monitor                          00040000  | MD_DIN                           00000018
Monitor.BackSpace                0004015B  | OP_BRL                           00000018
Monitor.Beep                     00040170  | MD_DLI                           0000001A
Monitor.CloseBracket             00040211  | OP_BVC                           0000001A
Monitor.Flag                     0004021A  | MD_SKY                           0000001C
Monitor.GetAddr                  000401B9  | OP_BVS                           0000001C
Monitor.GetByte                  000401B9  | MD_DIX                           0000001E
Monitor.GetWord                  000401B9  | OP_CLC                           0000001E
Monitor.Hex                      000401FF  | MD_DIY                           00000020
Monitor.Hex2                     000401F6  | M_FLAG                           00000020
Monitor.Hex4                     000401F1  | OP_CLD                           00000020
Monitor.HexCHi                   000401E1  | MD_DLY                           00000022
Monitor.HexSPHi                  000401ED  | OP_CLI                           00000022
Monitor.HexXHi                   000401E5  | MD_IMP                           00000024
Monitor.HexYHi                   000401E9  | OP_CLV                           00000024
Monitor.Mask                     00040222  | MD_REL                           00000026
Monitor.NewCommand               0004012C  | OP_CMP                           00000026
Monitor.NewLine                  000401D8  | MD_RLG                           00000028
Monitor.OpenBracket              0004020D  | OP_COP                           00000028
Monitor.Print                    000401CC  | MD_MOV                           0000002A
Monitor.ShortA                   00040099  | OP_CPX                           0000002A
Monitor.ShortX                   000400BF  | MD_IMM                           0000002C
Monitor.ShortY                   000400E5  | OP_CPY                           0000002C
Monitor.ShowError                000401B0  | MD_INT                           0000002E
Monitor.ShowRegisters            00040039  | OP_DEC                           0000002E
Monitor.SkipSpaces               000401B9  | MD_IMX                           00000030
Monitor.StrC                     00040236  | OP_DEX                           00000030
Monitor.StrDBR                   0004024C  | OP_DEY                           00000032
Monitor.StrDP                    00040242  | OP_EOR                           00000034
Monitor.StrE                     0004022E  | OP_INC                           00000036
Monitor.StrError                 00040252  | OP_INX                           00000038
Monitor.StrHelp                  0004026C  | OP_INY                           0000003A
Monitor.StrP                     00040232  | OP_JML                           0000003C
Monitor.StrPC                    0004022A  | OP_JMP                           0000003E
Monitor.StrSP                    00040247  | OP_JSL                           00000040
Monitor.StrX                     0004023A  | UART_BUFSIZ                      00000040
Monitor.StrY                     0004023E  | V_FLAG                           00000040
Monitor.ToUpper                  000401C1  | OP_JSR                           00000042
Monitor.UartRx                   00040215  | OP_LDA                           00000044
Monitor.UartTx                   00040208  | OP_LDX                           00000046
N_FLAG                           00000080  | OP_LDY                           00000048
OPCODES                          00040284  | OP_LSR                           0000004A
OP_ADC                           00000000  | OP_MVN                           0000004C
OP_AND                           00000002  | OP_MVP                           0000004E
OP_ASL                           00000004  | OP_NOP                           00000050
OP_BCC                           00000006  | OP_ORA                           00000052
OP_BCS                           00000008  | OP_PEA                           00000054
OP_BEQ                           0000000A  | OP_PEI                           00000056
OP_BIT                           0000000C  | OP_PER                           00000058
OP_BMI                           0000000E  | OP_PHA                           0000005A
OP_BNE                           00000010  | OP_PHB                           0000005C

Portable 65xx Assembler [19.05]

OP_BPL                           00000012  | OP_PHD                           0000005E
OP_BRA                           00000014  | OP_PHK                           00000060
OP_BRK                           00000016  | OP_PHP                           00000062
OP_BRL                           00000018  | BYTES_PER_LINE                   00000064
OP_BVC                           0000001A  | OP_PHX                           00000064
OP_BVS                           0000001C  | OP_PHY                           00000066
OP_CLC                           0000001E  | OP_PLA                           00000068
OP_CLD                           00000020  | OP_PLB                           0000006A
OP_CLI                           00000022  | OP_PLD                           0000006C
OP_CLV                           00000024  | OP_PLP                           0000006E
OP_CMP                           00000026  | OP_PLX                           00000070
OP_COP                           00000028  | OP_PLY                           00000072
OP_CPX                           0000002A  | OP_REP                           00000074
OP_CPY                           0000002C  | OP_ROL                           00000076
OP_DEC                           0000002E  | OP_ROR                           00000078
OP_DEX                           00000030  | OP_RTI                           0000007A
OP_DEY                           00000032  | OP_RTL                           0000007C
OP_EOR                           00000034  | OP_RTS                           0000007E
OP_INC                           00000036  | DEL                              0000007F
OP_INX                           00000038  | N_FLAG                           00000080
OP_INY                           0000003A  | OP_SBC                           00000080
OP_JML                           0000003C  | OP_SEC                           00000082
OP_JMP                           0000003E  | OP_SED                           00000084
OP_JSL                           00000040  | OP_SEI                           00000086
OP_JSR                           00000042  | OP_SEP                           00000088
OP_LDA                           00000044  | OP_STA                           0000008A
OP_LDX                           00000046  | OP_STP                           0000008C
OP_LDY                           00000048  | OP_STX                           0000008E
OP_LSR                           0000004A  | OP_STY                           00000090
OP_MVN                           0000004C  | OP_STZ                           00000092
OP_MVP                           0000004E  | OP_TAX                           00000094
OP_NOP                           00000050  | OP_TAY                           00000096
OP_ORA                           00000052  | OP_TCD                           00000098
OP_PEA                           00000054  | OP_TCS                           0000009A
OP_PEI                           00000056  | OP_TDC                           0000009C
OP_PER                           00000058  | OP_TRB                           0000009E
OP_PHA                           0000005A  | OP_TSB                           000000A0
OP_PHB                           0000005C  | OP_TSC                           000000A2
OP_PHD                           0000005E  | OP_TSX                           000000A4
OP_PHK                           00000060  | OP_TXA                           000000A6
OP_PHP                           00000062  | OP_TXS                           000000A8
OP_PHX                           00000064  | OP_TXY                           000000AA
OP_PHY                           00000066  | OP_TYA                           000000AC
OP_PLA                           00000068  | OP_TYX                           000000AE
OP_PLB                           0000006A  | OP_WAI                           000000B0
OP_PLD                           0000006C  | OP_WDM                           000000B2
OP_PLP                           0000006E  | OP_XBA                           000000B4
OP_PLX                           00000070  | OP_XCE                           000000B6
OP_PLY                           00000072  | SVGA_HEIGHT                      00000258
OP_REP                           00000074  | SVGA_WIDTH                       00000320
OP_ROL                           00000076  | MON_PAGE                         0000EE00
OP_ROR                           00000078  | REG_E                            0000EE00
OP_RTI                           0000007A  | REG_P                            0000EE01
OP_RTL                           0000007C  | REG_C                            0000EE02

Portable 65xx Assembler [19.05]

OP_RTS                           0000007E  | REG_X                            0000EE04
OP_SBC                           00000080  | REG_Y                            0000EE06
OP_SEC                           00000082  | REG_SP                           0000EE08
OP_SED                           00000084  | REG_DP                           0000EE0A
OP_SEI                           00000086  | REG_PC                           0000EE0C
OP_SEP                           00000088  | REG_PBR                          0000EE0E
OP_STA                           0000008A  | REG_DBR                          0000EE0F
OP_STP                           0000008C  | CMD_LEN                          0000EE10
OP_STX                           0000008E  | BANK                             0000EE11
OP_STY                           00000090  | ADDRS                            0000EE12
OP_STZ                           00000092  | ADDRL                            0000EE15
OP_TAX                           00000094  | CMD_BUF                          0000EE80
OP_TAY                           00000096  | IO_PAGE                          0000EF00
OP_TCD                           00000098  | TX_HEAD                          0000EF00
OP_TCS                           0000009A  | TX_TAIL                          0000EF01
OP_TDC                           0000009C  | RX_HEAD                          0000EF02
OP_TRB                           0000009E  | RX_TAIL                          0000EF03
OP_TSB                           000000A0  | TICK                             0000EF04
OP_TSC                           000000A2  | TX_DATA                          0000EF08
OP_TSX                           000000A4  | RX_DATA                          0000EF48
OP_TXA                           000000A6  | COPE                             0000F006
OP_TXS                           000000A8  | COPN                             0000F007
OP_TXY                           000000AA  | RESET                            0000F008
OP_TYA                           000000AC  | BOOT_MESSAGE                     0000F034
OP_TYX                           000000AE  | Uart1Tx                          0000F06C
OP_WAI                           000000B0  | Uart1Rx                          0000F09E
OP_WDM                           000000B2  | IRQBRK                           0000F0C1
OP_XBA                           000000B4  | BRKN                             0000F0C9
OP_XCE                           000000B6  | IRQN                             0000F0DA
PIXELS_PER_BYTE                  00000008  | IRQHandler                       0000F0E8
REG_C                            0000EE02  | UnusedVector                     0000F141
REG_DBR                          0000EE0F  | VLINES                           00010000
REG_DP                           0000EE0A  | VDATA                            000104B0
REG_E                            0000EE00  | VEND                             0001EF10
REG_P                            0000EE01  | Monitor                          00040000
REG_PBR                          0000EE0E  | Monitor.ShowRegisters            00040039
REG_PC                           0000EE0C  | Monitor.ShortA                   00040099
REG_SP                           0000EE08  | Monitor.ShortX                   000400BF
REG_X                            0000EE04  | Monitor.ShortY                   000400E5
REG_Y                            0000EE06  | Monitor.NewCommand               0004012C
RESET                            0000F008  | Monitor.BackSpace                0004015B
RX_DATA                          0000EF48  | Monitor.Beep                     00040170
RX_HEAD                          0000EF02  | Monitor.ShowError                000401B0
RX_TAIL                          0000EF03  | Monitor.GetAddr                  000401B9
SVGA_HEIGHT                      00000258  | Monitor.GetByte                  000401B9
SVGA_WIDTH                       00000320  | Monitor.GetWord                  000401B9
TICK                             0000EF04  | Monitor.SkipSpaces               000401B9
TX_DATA                          0000EF08  | Monitor.ToUpper                  000401C1
TX_HEAD                          0000EF00  | Monitor.Print                    000401CC
TX_TAIL                          0000EF01  | Monitor.NewLine                  000401D8
UART_BUFSIZ                      00000040  | Monitor.HexCHi                   000401E1
Uart1Rx                          0000F09E  | Monitor.HexXHi                   000401E5
Uart1Tx                          0000F06C  | Monitor.HexYHi                   000401E9
UnusedVector                     0000F141  | Monitor.HexSPHi                  000401ED

Portable 65xx Assembler [19.05]

VDATA                            000104B0  | Monitor.Hex4                     000401F1
VEND                             0001EF10  | Monitor.Hex2                     000401F6
VLINES                           00010000  | Monitor.Hex                      000401FF
V_FLAG                           00000040  | Monitor.UartTx                   00040208
WDM_IER_CLR                      00000003  | Monitor.OpenBracket              0004020D
WDM_IER_RD                       00000000  | Monitor.CloseBracket             00040211
WDM_IER_SET                      00000002  | Monitor.UartRx                   00040215
WDM_IER_WR                       00000001  | Monitor.Flag                     0004021A
WDM_IFLAGS                       00000008  | Monitor.Mask                     00040222
WDM_IFR_CLR                      00000007  | Monitor.StrPC                    0004022A
WDM_IFR_RD                       00000004  | Monitor.StrE                     0004022E
WDM_IFR_SET                      00000006  | Monitor.StrP                     00040232
WDM_IFR_WR                       00000005  | Monitor.StrC                     00040236
WDM_U1RX                         00000011  | Monitor.StrX                     0004023A
WDM_U1TX                         00000010  | Monitor.StrY                     0004023E
X_FLAG                           00000010  | Monitor.StrDP                    00040242
Z_FLAG                           00000002  | Monitor.StrSP                    00040247
__6501__                         00000000  | Monitor.StrDBR                   0004024C
__6502__                         00000000  | Monitor.StrError                 00040252
__65816__                        00000001  | Monitor.StrHelp                  0004026C
__65832__                        00000000  | OPCODES                          00040284
__65C02__                        00000000  | MODES                            00040384
__65SC02__                       00000000  | MNEMONICS                        00040484
